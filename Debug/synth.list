
synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000081a0  08002d80  08002d80  00012d80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af20  0800af20  0001af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af28  0800af28  0001af28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800af2c  0800af2c  0001af2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800af30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000240  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000024c  2000024c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003ca12  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002f6a  00000000  00000000  0005ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007014  00000000  00000000  0005f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  000669d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00067340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002195a  00000000  00000000  000680e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b941  00000000  00000000  00089a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c60f7  00000000  00000000  0009537b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015b472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b78  00000000  00000000  0015b4f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d68 	.word	0x08002d68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002d68 	.word	0x08002d68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <HAL_InitTick+0x3c>)
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_InitTick+0x40>)
{
 80004ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d0:	7818      	ldrb	r0, [r3, #0]
 80004d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004da:	6810      	ldr	r0, [r2, #0]
 80004dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e0:	f000 f896 	bl	8000610 <HAL_SYSTICK_Config>
 80004e4:	4604      	mov	r4, r0
 80004e6:	b958      	cbnz	r0, 8000500 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e8:	2d0f      	cmp	r5, #15
 80004ea:	d809      	bhi.n	8000500 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	4602      	mov	r2, r0
 80004ee:	4629      	mov	r1, r5
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004f4:	f000 f84a 	bl	800058c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <HAL_InitTick+0x44>)
 80004fa:	4620      	mov	r0, r4
 80004fc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000500:	2001      	movs	r0, #1
 8000502:	e7fc      	b.n	80004fe <HAL_InitTick+0x36>
 8000504:	20000008 	.word	0x20000008
 8000508:	20000000 	.word	0x20000000
 800050c:	20000004 	.word	0x20000004

08000510 <HAL_Init>:
{
 8000510:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f81b 	bl	8000568 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff ffc8 	bl	80004c8 <HAL_InitTick>
  HAL_MspInit();
 8000538:	f002 fa9c 	bl	8002a74 <HAL_MspInit>
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_IncTick+0x14>)
 8000548:	6811      	ldr	r1, [r2, #0]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028

08000568 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800056a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000578:	0200      	lsls	r0, r0, #8
 800057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000582:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000584:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800058e:	b570      	push	{r4, r5, r6, lr}
 8000590:	68dc      	ldr	r4, [r3, #12]
 8000592:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000596:	f1c4 0507 	rsb	r5, r4, #7
 800059a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a0:	bf28      	it	cs
 80005a2:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005aa:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ae:	bf8c      	ite	hi
 80005b0:	3c03      	subhi	r4, #3
 80005b2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	ea21 0303 	bic.w	r3, r1, r3
 80005b8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ba:	fa06 f404 	lsl.w	r4, r6, r4
 80005be:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	bfa8      	it	ge
 80005ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80005ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	bfbc      	itt	lt
 80005d4:	f000 000f 	andlt.w	r0, r0, #15
 80005d8:	4a05      	ldrlt	r2, [pc, #20]	; (80005f0 <HAL_NVIC_SetPriority+0x64>)
 80005da:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	bfaa      	itet	ge
 80005de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	e000ed14 	.word	0xe000ed14

080005f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005f4:	2800      	cmp	r0, #0
 80005f6:	db08      	blt.n	800060a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f8:	0942      	lsrs	r2, r0, #5
 80005fa:	2301      	movs	r3, #1
 80005fc:	f000 001f 	and.w	r0, r0, #31
 8000600:	fa03 f000 	lsl.w	r0, r3, r0
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <HAL_NVIC_EnableIRQ+0x18>)
 8000606:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800060a:	4770      	bx	lr
 800060c:	e000e100 	.word	0xe000e100

08000610 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	3801      	subs	r0, #1
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d20a      	bcs.n	800062e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	21f0      	movs	r1, #240	; 0xf0
 8000620:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000626:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800062e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800063c:	6803      	ldr	r3, [r0, #0]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000644:	f023 0303 	bic.w	r3, r3, #3
 8000648:	2118      	movs	r1, #24
 800064a:	3a10      	subs	r2, #16
 800064c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000650:	4904      	ldr	r1, [pc, #16]	; (8000664 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000652:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000654:	bf88      	it	hi
 8000656:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000658:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800065a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800065c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800065e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	08002d80 	.word	0x08002d80

08000668 <HAL_DMA_Init>:
{
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ff76 	bl	800055c <HAL_GetTick>
 8000670:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000672:	2c00      	cmp	r4, #0
 8000674:	d071      	beq.n	800075a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000676:	2300      	movs	r3, #0
 8000678:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800067c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800067e:	2302      	movs	r3, #2
 8000680:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000684:	6813      	ldr	r3, [r2, #0]
 8000686:	f023 0301 	bic.w	r3, r3, #1
 800068a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800068c:	6821      	ldr	r1, [r4, #0]
 800068e:	680b      	ldr	r3, [r1, #0]
 8000690:	07d8      	lsls	r0, r3, #31
 8000692:	d43c      	bmi.n	800070e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000694:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000696:	4d32      	ldr	r5, [pc, #200]	; (8000760 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000698:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800069a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800069c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	68e2      	ldr	r2, [r4, #12]
 80006a4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006a6:	6922      	ldr	r2, [r4, #16]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	6962      	ldr	r2, [r4, #20]
 80006ac:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006ae:	69e2      	ldr	r2, [r4, #28]
 80006b0:	4303      	orrs	r3, r0
 80006b2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80006b4:	6a22      	ldr	r2, [r4, #32]
 80006b6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006ba:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006bc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80006c0:	bf02      	ittt	eq
 80006c2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80006c6:	4335      	orreq	r5, r6
 80006c8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80006ca:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80006cc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006ce:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006d0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006d8:	d10b      	bne.n	80006f2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80006da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006dc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80006de:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006e0:	b13d      	cbz	r5, 80006f2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006e2:	b9f8      	cbnz	r0, 8000724 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d02d      	beq.n	8000744 <HAL_DMA_Init+0xdc>
 80006e8:	d301      	bcc.n	80006ee <HAL_DMA_Init+0x86>
 80006ea:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80006ec:	d101      	bne.n	80006f2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006ee:	01ea      	lsls	r2, r5, #7
 80006f0:	d42b      	bmi.n	800074a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80006f2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80006f4:	4620      	mov	r0, r4
 80006f6:	f7ff ffa1 	bl	800063c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80006fc:	233f      	movs	r3, #63	; 0x3f
 80006fe:	4093      	lsls	r3, r2
 8000700:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000702:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000704:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000706:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000708:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800070c:	e009      	b.n	8000722 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800070e:	f7ff ff25 	bl	800055c <HAL_GetTick>
 8000712:	1b40      	subs	r0, r0, r5
 8000714:	2805      	cmp	r0, #5
 8000716:	d9b9      	bls.n	800068c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000718:	2320      	movs	r3, #32
 800071a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800071c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800071e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000722:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000724:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000728:	d113      	bne.n	8000752 <HAL_DMA_Init+0xea>
    switch (tmp)
 800072a:	2a03      	cmp	r2, #3
 800072c:	d8e1      	bhi.n	80006f2 <HAL_DMA_Init+0x8a>
 800072e:	a001      	add	r0, pc, #4	; (adr r0, 8000734 <HAL_DMA_Init+0xcc>)
 8000730:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000734:	0800074b 	.word	0x0800074b
 8000738:	080006ef 	.word	0x080006ef
 800073c:	0800074b 	.word	0x0800074b
 8000740:	08000745 	.word	0x08000745
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000744:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000748:	d1d3      	bne.n	80006f2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800074e:	2001      	movs	r0, #1
 8000750:	e7e5      	b.n	800071e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000752:	2a02      	cmp	r2, #2
 8000754:	d9f9      	bls.n	800074a <HAL_DMA_Init+0xe2>
 8000756:	2a03      	cmp	r2, #3
 8000758:	e7c8      	b.n	80006ec <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800075a:	2001      	movs	r0, #1
 800075c:	e7e1      	b.n	8000722 <HAL_DMA_Init+0xba>
 800075e:	bf00      	nop
 8000760:	f010803f 	.word	0xf010803f

08000764 <HAL_DMA_Start_IT>:
{
 8000764:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000766:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800076a:	2c01      	cmp	r4, #1
 800076c:	d032      	beq.n	80007d4 <HAL_DMA_Start_IT+0x70>
 800076e:	2401      	movs	r4, #1
 8000770:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000774:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000778:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800077a:	2c01      	cmp	r4, #1
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0402 	mov.w	r4, #2
 8000784:	d124      	bne.n	80007d0 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000786:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800078a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800078c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800078e:	6825      	ldr	r5, [r4, #0]
 8000790:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000794:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000796:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000798:	6883      	ldr	r3, [r0, #8]
 800079a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800079c:	bf0e      	itee	eq
 800079e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80007a0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80007a2:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007a4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80007a6:	bf08      	it	eq
 80007a8:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007aa:	233f      	movs	r3, #63	; 0x3f
 80007ac:	4093      	lsls	r3, r2
 80007ae:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	f043 0316 	orr.w	r3, r3, #22
 80007b6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80007b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007ba:	b11b      	cbz	r3, 80007c4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	f043 0308 	orr.w	r3, r3, #8
 80007c2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007cc:	2000      	movs	r0, #0
}
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80007d0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80007d4:	2002      	movs	r0, #2
 80007d6:	e7fa      	b.n	80007ce <HAL_DMA_Start_IT+0x6a>

080007d8 <HAL_DMA_IRQHandler>:
{
 80007d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80007da:	2300      	movs	r3, #0
 80007dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007de:	4b5c      	ldr	r3, [pc, #368]	; (8000950 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007e0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80007e2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80007e6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007e8:	2208      	movs	r2, #8
 80007ea:	409a      	lsls	r2, r3
 80007ec:	4232      	tst	r2, r6
{
 80007ee:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007f0:	d00c      	beq.n	800080c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80007f2:	6801      	ldr	r1, [r0, #0]
 80007f4:	6808      	ldr	r0, [r1, #0]
 80007f6:	0740      	lsls	r0, r0, #29
 80007f8:	d508      	bpl.n	800080c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80007fa:	6808      	ldr	r0, [r1, #0]
 80007fc:	f020 0004 	bic.w	r0, r0, #4
 8000800:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000802:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000804:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000806:	f042 0201 	orr.w	r2, r2, #1
 800080a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800080c:	2201      	movs	r2, #1
 800080e:	409a      	lsls	r2, r3
 8000810:	4232      	tst	r2, r6
 8000812:	d008      	beq.n	8000826 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000814:	6821      	ldr	r1, [r4, #0]
 8000816:	6949      	ldr	r1, [r1, #20]
 8000818:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800081a:	bf41      	itttt	mi
 800081c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800081e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000820:	f042 0202 	orrmi.w	r2, r2, #2
 8000824:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000826:	2204      	movs	r2, #4
 8000828:	409a      	lsls	r2, r3
 800082a:	4232      	tst	r2, r6
 800082c:	d008      	beq.n	8000840 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800082e:	6821      	ldr	r1, [r4, #0]
 8000830:	6809      	ldr	r1, [r1, #0]
 8000832:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000834:	bf41      	itttt	mi
 8000836:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000838:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800083a:	f042 0204 	orrmi.w	r2, r2, #4
 800083e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000840:	2210      	movs	r2, #16
 8000842:	409a      	lsls	r2, r3
 8000844:	4232      	tst	r2, r6
 8000846:	d010      	beq.n	800086a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	0709      	lsls	r1, r1, #28
 800084e:	d50c      	bpl.n	800086a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000850:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	0350      	lsls	r0, r2, #13
 8000856:	d537      	bpl.n	80008c8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	0319      	lsls	r1, r3, #12
 800085c:	d401      	bmi.n	8000862 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800085e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000860:	e000      	b.n	8000864 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000864:	b10b      	cbz	r3, 800086a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000866:	4620      	mov	r0, r4
 8000868:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800086a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800086c:	2220      	movs	r2, #32
 800086e:	408a      	lsls	r2, r1
 8000870:	4232      	tst	r2, r6
 8000872:	d03a      	beq.n	80008ea <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	06c6      	lsls	r6, r0, #27
 800087a:	d536      	bpl.n	80008ea <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800087c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800087e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000882:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000884:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000886:	d127      	bne.n	80008d8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000888:	f022 0216 	bic.w	r2, r2, #22
 800088c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000894:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000896:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000898:	b90a      	cbnz	r2, 800089e <HAL_DMA_IRQHandler+0xc6>
 800089a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800089c:	b11a      	cbz	r2, 80008a6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f022 0208 	bic.w	r2, r2, #8
 80008a4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008a6:	233f      	movs	r3, #63	; 0x3f
 80008a8:	408b      	lsls	r3, r1
 80008aa:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80008ac:	2300      	movs	r3, #0
 80008ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80008b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d045      	beq.n	800094a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80008be:	4620      	mov	r0, r4
}
 80008c0:	b003      	add	sp, #12
 80008c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80008c6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008cc:	bf5e      	ittt	pl
 80008ce:	681a      	ldrpl	r2, [r3, #0]
 80008d0:	f022 0208 	bicpl.w	r2, r2, #8
 80008d4:	601a      	strpl	r2, [r3, #0]
 80008d6:	e7c2      	b.n	800085e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008d8:	0350      	lsls	r0, r2, #13
 80008da:	d527      	bpl.n	800092c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	0319      	lsls	r1, r3, #12
 80008e0:	d431      	bmi.n	8000946 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80008e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80008e4:	b10b      	cbz	r3, 80008ea <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80008e6:	4620      	mov	r0, r4
 80008e8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80008ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008ec:	b36b      	cbz	r3, 800094a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80008ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008f0:	07da      	lsls	r2, r3, #31
 80008f2:	d519      	bpl.n	8000928 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 80008f4:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80008f6:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80008f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80008fc:	6813      	ldr	r3, [r2, #0]
 80008fe:	f023 0301 	bic.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000904:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000908:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800090c:	9b01      	ldr	r3, [sp, #4]
 800090e:	3301      	adds	r3, #1
 8000910:	42bb      	cmp	r3, r7
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	d802      	bhi.n	800091c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000916:	6813      	ldr	r3, [r2, #0]
 8000918:	07db      	lsls	r3, r3, #31
 800091a:	d4f7      	bmi.n	800090c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800091c:	2300      	movs	r3, #0
 800091e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000922:	2301      	movs	r3, #1
 8000924:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000928:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800092a:	e7c6      	b.n	80008ba <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000932:	d108      	bne.n	8000946 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000934:	6819      	ldr	r1, [r3, #0]
 8000936:	f021 0110 	bic.w	r1, r1, #16
 800093a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800093c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800093e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000942:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000948:	e7cc      	b.n	80008e4 <HAL_DMA_IRQHandler+0x10c>
}
 800094a:	b003      	add	sp, #12
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008

08000954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000958:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000b0c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000960:	4a68      	ldr	r2, [pc, #416]	; (8000b04 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000962:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000b10 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000966:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000968:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800096a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800096c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800096e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000970:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000972:	42ac      	cmp	r4, r5
 8000974:	f040 80b0 	bne.w	8000ad8 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	684c      	ldr	r4, [r1, #4]
 800097a:	f024 0c10 	bic.w	ip, r4, #16
 800097e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000982:	2603      	movs	r6, #3
 8000984:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 8000988:	fa06 f60e 	lsl.w	r6, r6, lr
 800098c:	2f01      	cmp	r7, #1
 800098e:	ea6f 0606 	mvn.w	r6, r6
 8000992:	d811      	bhi.n	80009b8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8000994:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000996:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800099a:	68cf      	ldr	r7, [r1, #12]
 800099c:	fa07 f70e 	lsl.w	r7, r7, lr
 80009a0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80009a4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009a6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a8:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009ac:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009b0:	409f      	lsls	r7, r3
 80009b2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80009b6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80009b8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009ba:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009be:	688f      	ldr	r7, [r1, #8]
 80009c0:	fa07 f70e 	lsl.w	r7, r7, lr
 80009c4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80009cc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ce:	d116      	bne.n	80009fe <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80009d0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80009d4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009d8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009dc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009e4:	f04f 0c0f 	mov.w	ip, #15
 80009e8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009ec:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009f0:	690f      	ldr	r7, [r1, #16]
 80009f2:	fa07 f70b 	lsl.w	r7, r7, fp
 80009f6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009fa:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009fe:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a00:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a02:	f004 0703 	and.w	r7, r4, #3
 8000a06:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000a0a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000a0e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a10:	00e6      	lsls	r6, r4, #3
 8000a12:	d561      	bpl.n	8000ad8 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a14:	f04f 0b00 	mov.w	fp, #0
 8000a18:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a1c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a20:	4e39      	ldr	r6, [pc, #228]	; (8000b08 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a26:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a2a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a2e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a32:	9703      	str	r7, [sp, #12]
 8000a34:	9f03      	ldr	r7, [sp, #12]
 8000a36:	f023 0703 	bic.w	r7, r3, #3
 8000a3a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a3e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a42:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a46:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a4a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a4e:	f04f 0c0f 	mov.w	ip, #15
 8000a52:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a56:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a58:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5c:	d043      	beq.n	8000ae6 <HAL_GPIO_Init+0x192>
 8000a5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a62:	42b0      	cmp	r0, r6
 8000a64:	d041      	beq.n	8000aea <HAL_GPIO_Init+0x196>
 8000a66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a6a:	42b0      	cmp	r0, r6
 8000a6c:	d03f      	beq.n	8000aee <HAL_GPIO_Init+0x19a>
 8000a6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a72:	42b0      	cmp	r0, r6
 8000a74:	d03d      	beq.n	8000af2 <HAL_GPIO_Init+0x19e>
 8000a76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a7a:	42b0      	cmp	r0, r6
 8000a7c:	d03b      	beq.n	8000af6 <HAL_GPIO_Init+0x1a2>
 8000a7e:	4548      	cmp	r0, r9
 8000a80:	d03b      	beq.n	8000afa <HAL_GPIO_Init+0x1a6>
 8000a82:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000a86:	42b0      	cmp	r0, r6
 8000a88:	d039      	beq.n	8000afe <HAL_GPIO_Init+0x1aa>
 8000a8a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a8e:	42b0      	cmp	r0, r6
 8000a90:	bf14      	ite	ne
 8000a92:	2608      	movne	r6, #8
 8000a94:	2607      	moveq	r6, #7
 8000a96:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a9a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a9e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000aa0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000aa8:	bf0c      	ite	eq
 8000aaa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000aac:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000aae:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000ab0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	bf0c      	ite	eq
 8000ab8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000aba:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000abc:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000abe:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	bf0c      	ite	eq
 8000ac6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000ac8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000aca:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000acc:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ace:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	bf54      	ite	pl
 8000ad2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000ad4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000ad6:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad8:	3301      	adds	r3, #1
 8000ada:	2b10      	cmp	r3, #16
 8000adc:	f47f af45 	bne.w	800096a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ae0:	b005      	add	sp, #20
 8000ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae6:	465e      	mov	r6, fp
 8000ae8:	e7d5      	b.n	8000a96 <HAL_GPIO_Init+0x142>
 8000aea:	2601      	movs	r6, #1
 8000aec:	e7d3      	b.n	8000a96 <HAL_GPIO_Init+0x142>
 8000aee:	2602      	movs	r6, #2
 8000af0:	e7d1      	b.n	8000a96 <HAL_GPIO_Init+0x142>
 8000af2:	2603      	movs	r6, #3
 8000af4:	e7cf      	b.n	8000a96 <HAL_GPIO_Init+0x142>
 8000af6:	2604      	movs	r6, #4
 8000af8:	e7cd      	b.n	8000a96 <HAL_GPIO_Init+0x142>
 8000afa:	2605      	movs	r6, #5
 8000afc:	e7cb      	b.n	8000a96 <HAL_GPIO_Init+0x142>
 8000afe:	2606      	movs	r6, #6
 8000b00:	e7c9      	b.n	8000a96 <HAL_GPIO_Init+0x142>
 8000b02:	bf00      	nop
 8000b04:	40013c00 	.word	0x40013c00
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021400 	.word	0x40021400

08000b14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b14:	b10a      	cbz	r2, 8000b1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b16:	6181      	str	r1, [r0, #24]
  }
}
 8000b18:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	e7fb      	b.n	8000b16 <HAL_GPIO_WritePin+0x2>

08000b1e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b1e:	6801      	ldr	r1, [r0, #0]
 8000b20:	694b      	ldr	r3, [r1, #20]
 8000b22:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	d010      	beq.n	8000b4e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b2c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000b30:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b32:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000b34:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b3a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b3e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4770      	bx	lr
  }
  return HAL_OK;
 8000b4e:	4618      	mov	r0, r3
}
 8000b50:	4770      	bx	lr

08000b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b56:	4604      	mov	r4, r0
 8000b58:	4616      	mov	r6, r2
 8000b5a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000b5c:	b28f      	uxth	r7, r1
 8000b5e:	6825      	ldr	r5, [r4, #0]
 8000b60:	6968      	ldr	r0, [r5, #20]
 8000b62:	ea37 0000 	bics.w	r0, r7, r0
 8000b66:	d017      	beq.n	8000b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b68:	696b      	ldr	r3, [r5, #20]
 8000b6a:	055a      	lsls	r2, r3, #21
 8000b6c:	d516      	bpl.n	8000b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b74:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b76:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000b7a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b7c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b82:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b8c:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b90:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000b92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
}
 8000b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000b9c:	1c73      	adds	r3, r6, #1
 8000b9e:	d0df      	beq.n	8000b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ba0:	f7ff fcdc 	bl	800055c <HAL_GetTick>
 8000ba4:	eba0 0008 	sub.w	r0, r0, r8
 8000ba8:	42b0      	cmp	r0, r6
 8000baa:	d801      	bhi.n	8000bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d1d6      	bne.n	8000b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000bb0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000bb2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000bb4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000bb6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000bba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000bbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000bc0:	f042 0220 	orr.w	r2, r2, #32
 8000bc4:	e7e4      	b.n	8000b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08000bc6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000bc6:	b570      	push	{r4, r5, r6, lr}
 8000bc8:	4604      	mov	r4, r0
 8000bca:	460d      	mov	r5, r1
 8000bcc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	075b      	lsls	r3, r3, #29
 8000bd4:	d501      	bpl.n	8000bda <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000bd6:	2000      	movs	r0, #0
}
 8000bd8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f7ff ff9f 	bl	8000b1e <I2C_IsAcknowledgeFailed>
 8000be0:	b9a8      	cbnz	r0, 8000c0e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000be2:	1c6a      	adds	r2, r5, #1
 8000be4:	d0f3      	beq.n	8000bce <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000be6:	f7ff fcb9 	bl	800055c <HAL_GetTick>
 8000bea:	1b80      	subs	r0, r0, r6
 8000bec:	42a8      	cmp	r0, r5
 8000bee:	d801      	bhi.n	8000bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d1ec      	bne.n	8000bce <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000bf4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000bf6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000bf8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000bfa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000bfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000c02:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000c08:	f042 0220 	orr.w	r2, r2, #32
 8000c0c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e7e2      	b.n	8000bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08000c12 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c12:	b570      	push	{r4, r5, r6, lr}
 8000c14:	4604      	mov	r4, r0
 8000c16:	460d      	mov	r5, r1
 8000c18:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c1a:	6820      	ldr	r0, [r4, #0]
 8000c1c:	6943      	ldr	r3, [r0, #20]
 8000c1e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000c22:	d001      	beq.n	8000c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000c24:	2000      	movs	r0, #0
 8000c26:	e010      	b.n	8000c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000c28:	6942      	ldr	r2, [r0, #20]
 8000c2a:	06d2      	lsls	r2, r2, #27
 8000c2c:	d50e      	bpl.n	8000c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c2e:	f06f 0210 	mvn.w	r2, #16
 8000c32:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c34:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c36:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000c40:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000c42:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000c48:	2001      	movs	r0, #1
}
 8000c4a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c4c:	f7ff fc86 	bl	800055c <HAL_GetTick>
 8000c50:	1b80      	subs	r0, r0, r6
 8000c52:	42a8      	cmp	r0, r5
 8000c54:	d801      	bhi.n	8000c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d1df      	bne.n	8000c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000c5a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000c5c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000c5e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000c60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000c64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000c68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c6a:	f042 0220 	orr.w	r2, r2, #32
 8000c6e:	e7e8      	b.n	8000c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000c70 <I2C_WaitOnFlagUntilTimeout>:
{
 8000c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c74:	9e08      	ldr	r6, [sp, #32]
 8000c76:	4604      	mov	r4, r0
 8000c78:	4690      	mov	r8, r2
 8000c7a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c7c:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8000c80:	b28d      	uxth	r5, r1
 8000c82:	6821      	ldr	r1, [r4, #0]
 8000c84:	f1b9 0f01 	cmp.w	r9, #1
 8000c88:	bf0c      	ite	eq
 8000c8a:	694b      	ldreq	r3, [r1, #20]
 8000c8c:	698b      	ldrne	r3, [r1, #24]
 8000c8e:	ea35 0303 	bics.w	r3, r5, r3
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	4598      	cmp	r8, r3
 8000c9a:	d001      	beq.n	8000ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e016      	b.n	8000cce <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8000ca0:	1c7b      	adds	r3, r7, #1
 8000ca2:	d0ef      	beq.n	8000c84 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ca4:	f7ff fc5a 	bl	800055c <HAL_GetTick>
 8000ca8:	1b80      	subs	r0, r0, r6
 8000caa:	42b8      	cmp	r0, r7
 8000cac:	d801      	bhi.n	8000cb2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d1e7      	bne.n	8000c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000cb2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000cb4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000cb6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000cb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000cbc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000cc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000cc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000cc6:	f042 0220 	orr.w	r2, r2, #32
 8000cca:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ccc:	2001      	movs	r0, #1
}
 8000cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000cd2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000cd2:	b570      	push	{r4, r5, r6, lr}
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	061b      	lsls	r3, r3, #24
 8000ce0:	d501      	bpl.n	8000ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ce2:	2000      	movs	r0, #0
}
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f7ff ff19 	bl	8000b1e <I2C_IsAcknowledgeFailed>
 8000cec:	b9a8      	cbnz	r0, 8000d1a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000cee:	1c6a      	adds	r2, r5, #1
 8000cf0:	d0f3      	beq.n	8000cda <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cf2:	f7ff fc33 	bl	800055c <HAL_GetTick>
 8000cf6:	1b80      	subs	r0, r0, r6
 8000cf8:	42a8      	cmp	r0, r5
 8000cfa:	d801      	bhi.n	8000d00 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d1ec      	bne.n	8000cda <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d00:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d02:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d04:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d14:	f042 0220 	orr.w	r2, r2, #32
 8000d18:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	e7e2      	b.n	8000ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08000d20 <HAL_I2C_Init>:
{
 8000d20:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000d22:	4604      	mov	r4, r0
 8000d24:	b908      	cbnz	r0, 8000d2a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000d26:	2001      	movs	r0, #1
}
 8000d28:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d32:	b91b      	cbnz	r3, 8000d3c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000d34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000d38:	f001 feba 	bl	8002ab0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d3c:	2324      	movs	r3, #36	; 0x24
 8000d3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d5a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d5c:	f001 f8c6 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	4a41      	ldr	r2, [pc, #260]	; (8000e68 <HAL_I2C_Init+0x148>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d84d      	bhi.n	8000e04 <HAL_I2C_Init+0xe4>
 8000d68:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <HAL_I2C_Init+0x14c>)
 8000d6a:	4290      	cmp	r0, r2
 8000d6c:	d9db      	bls.n	8000d26 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d6e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d70:	493f      	ldr	r1, [pc, #252]	; (8000e70 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d72:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d74:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d78:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000d7c:	430d      	orrs	r5, r1
 8000d7e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d80:	6a15      	ldr	r5, [r2, #32]
 8000d82:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000d86:	3101      	adds	r1, #1
 8000d88:	4329      	orrs	r1, r5
 8000d8a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d8c:	69d1      	ldr	r1, [r2, #28]
 8000d8e:	4d36      	ldr	r5, [pc, #216]	; (8000e68 <HAL_I2C_Init+0x148>)
 8000d90:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000d94:	42ab      	cmp	r3, r5
 8000d96:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d9a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000d9e:	d848      	bhi.n	8000e32 <HAL_I2C_Init+0x112>
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da6:	1c43      	adds	r3, r0, #1
 8000da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	bf38      	it	cc
 8000db0:	2304      	movcc	r3, #4
 8000db2:	430b      	orrs	r3, r1
 8000db4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000db6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000dc2:	430b      	orrs	r3, r1
 8000dc4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000dc6:	6891      	ldr	r1, [r2, #8]
 8000dc8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000dcc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000dda:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000dde:	68d1      	ldr	r1, [r2, #12]
 8000de0:	4303      	orrs	r3, r0
 8000de2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000de6:	430b      	orrs	r3, r1
 8000de8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000dea:	6813      	ldr	r3, [r2, #0]
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000df4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000df8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dfc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfe:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000e02:	e791      	b.n	8000d28 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_I2C_Init+0x154>)
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d98d      	bls.n	8000d26 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e0a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e0c:	4e18      	ldr	r6, [pc, #96]	; (8000e70 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e0e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e10:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e14:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000e18:	4335      	orrs	r5, r6
 8000e1a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e1c:	6a15      	ldr	r5, [r2, #32]
 8000e1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e22:	4371      	muls	r1, r6
 8000e24:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000e28:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000e2c:	fbb1 f1f6 	udiv	r1, r1, r6
 8000e30:	e7a9      	b.n	8000d86 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e32:	68a5      	ldr	r5, [r4, #8]
 8000e34:	b955      	cbnz	r5, 8000e4c <HAL_I2C_Init+0x12c>
 8000e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e3e:	1c43      	adds	r3, r0, #1
 8000e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e44:	b16b      	cbz	r3, 8000e62 <HAL_I2C_Init+0x142>
 8000e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4a:	e7b2      	b.n	8000db2 <HAL_I2C_Init+0x92>
 8000e4c:	2519      	movs	r5, #25
 8000e4e:	436b      	muls	r3, r5
 8000e50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e54:	1c43      	adds	r3, r0, #1
 8000e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e5a:	b113      	cbz	r3, 8000e62 <HAL_I2C_Init+0x142>
 8000e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e60:	e7a7      	b.n	8000db2 <HAL_I2C_Init+0x92>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e7a5      	b.n	8000db2 <HAL_I2C_Init+0x92>
 8000e66:	bf00      	nop
 8000e68:	000186a0 	.word	0x000186a0
 8000e6c:	001e847f 	.word	0x001e847f
 8000e70:	000f4240 	.word	0x000f4240
 8000e74:	003d08ff 	.word	0x003d08ff

08000e78 <HAL_I2C_Master_Transmit>:
{
 8000e78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	461f      	mov	r7, r3
 8000e80:	460d      	mov	r5, r1
 8000e82:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff fb6a 	bl	800055c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e88:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000e8c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000e8e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e90:	d004      	beq.n	8000e9c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000e92:	2502      	movs	r5, #2
}
 8000e94:	4628      	mov	r0, r5
 8000e96:	b004      	add	sp, #16
 8000e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e9c:	9000      	str	r0, [sp, #0]
 8000e9e:	2319      	movs	r3, #25
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	495b      	ldr	r1, [pc, #364]	; (8001010 <HAL_I2C_Master_Transmit+0x198>)
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff fee3 	bl	8000c70 <I2C_WaitOnFlagUntilTimeout>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d1f1      	bne.n	8000e92 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000eae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d0ed      	beq.n	8000e92 <HAL_I2C_Master_Transmit+0x1a>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000ec2:	bf5e      	ittt	pl
 8000ec4:	681a      	ldrpl	r2, [r3, #0]
 8000ec6:	f042 0201 	orrpl.w	r2, r2, #1
 8000eca:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ed2:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000ed4:	2221      	movs	r2, #33	; 0x21
 8000ed6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000eda:	2210      	movs	r2, #16
 8000edc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000ee4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ee6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000ee8:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eea:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <HAL_I2C_Master_Transmit+0x19c>)
 8000eec:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000eee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000ef0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000ef4:	2a08      	cmp	r2, #8
 8000ef6:	d004      	beq.n	8000f02 <HAL_I2C_Master_Transmit+0x8a>
 8000ef8:	2a01      	cmp	r2, #1
 8000efa:	d002      	beq.n	8000f02 <HAL_I2C_Master_Transmit+0x8a>
 8000efc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000f00:	d104      	bne.n	8000f0c <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e002      	b.n	8000f12 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000f0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f0e:	2a12      	cmp	r2, #18
 8000f10:	d0f7      	beq.n	8000f02 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f12:	2200      	movs	r2, #0
 8000f14:	9600      	str	r6, [sp, #0]
 8000f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fea7 	bl	8000c70 <I2C_WaitOnFlagUntilTimeout>
 8000f22:	6822      	ldr	r2, [r4, #0]
 8000f24:	b138      	cbz	r0, 8000f36 <HAL_I2C_Master_Transmit+0xbe>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000f2a:	bf44      	itt	mi
 8000f2c:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8000f30:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000f32:	2501      	movs	r5, #1
 8000f34:	e7ae      	b.n	8000e94 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f36:	6923      	ldr	r3, [r4, #16]
 8000f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f3c:	d121      	bne.n	8000f82 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f3e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000f42:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f44:	4633      	mov	r3, r6
 8000f46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f48:	4933      	ldr	r1, [pc, #204]	; (8001018 <HAL_I2C_Master_Transmit+0x1a0>)
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff fe01 	bl	8000b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f50:	4605      	mov	r5, r0
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d1ed      	bne.n	8000f32 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	9003      	str	r0, [sp, #12]
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	9203      	str	r2, [sp, #12]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	9303      	str	r3, [sp, #12]
 8000f62:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000f64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f66:	b9f3      	cbnz	r3, 8000fa6 <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f68:	6821      	ldr	r1, [r4, #0]
 8000f6a:	680a      	ldr	r2, [r1, #0]
 8000f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f70:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f72:	2220      	movs	r2, #32
 8000f74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000f78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000f80:	e788      	b.n	8000e94 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000f82:	11eb      	asrs	r3, r5, #7
 8000f84:	f003 0306 	and.w	r3, r3, #6
 8000f88:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000f8c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000f8e:	4923      	ldr	r1, [pc, #140]	; (800101c <HAL_I2C_Master_Transmit+0x1a4>)
 8000f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f92:	4633      	mov	r3, r6
 8000f94:	4620      	mov	r0, r4
 8000f96:	f7ff fddc 	bl	8000b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d1c9      	bne.n	8000f32 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	b2ed      	uxtb	r5, r5
 8000fa2:	611d      	str	r5, [r3, #16]
 8000fa4:	e7ce      	b.n	8000f44 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fa6:	4632      	mov	r2, r6
 8000fa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff fe91 	bl	8000cd2 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fb0:	b140      	cbz	r0, 8000fc4 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d1bc      	bne.n	8000f32 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e7b6      	b.n	8000f32 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000fce:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000fd0:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000fd2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000fd4:	3a01      	subs	r2, #1
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000fda:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fdc:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000fde:	1e51      	subs	r1, r2, #1
 8000fe0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fe2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000fe4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fe6:	d50a      	bpl.n	8000ffe <HAL_I2C_Master_Transmit+0x186>
 8000fe8:	b149      	cbz	r1, 8000ffe <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fea:	7859      	ldrb	r1, [r3, #1]
 8000fec:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000fee:	3302      	adds	r3, #2
 8000ff0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000ff2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000ff8:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000ffa:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000ffc:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ffe:	4632      	mov	r2, r6
 8001000:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001002:	4620      	mov	r0, r4
 8001004:	f7ff fddf 	bl	8000bc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001008:	2800      	cmp	r0, #0
 800100a:	d0ab      	beq.n	8000f64 <HAL_I2C_Master_Transmit+0xec>
 800100c:	e7d1      	b.n	8000fb2 <HAL_I2C_Master_Transmit+0x13a>
 800100e:	bf00      	nop
 8001010:	00100002 	.word	0x00100002
 8001014:	ffff0000 	.word	0xffff0000
 8001018:	00010002 	.word	0x00010002
 800101c:	00010008 	.word	0x00010008

08001020 <HAL_I2C_Master_Receive>:
{
 8001020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001024:	4604      	mov	r4, r0
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	4698      	mov	r8, r3
 800102a:	460e      	mov	r6, r1
 800102c:	4691      	mov	r9, r2
 800102e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fa94 	bl	800055c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001034:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001038:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800103a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800103c:	d004      	beq.n	8001048 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800103e:	2602      	movs	r6, #2
}
 8001040:	4630      	mov	r0, r6
 8001042:	b009      	add	sp, #36	; 0x24
 8001044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001048:	9000      	str	r0, [sp, #0]
 800104a:	2319      	movs	r3, #25
 800104c:	2201      	movs	r2, #1
 800104e:	499b      	ldr	r1, [pc, #620]	; (80012bc <HAL_I2C_Master_Receive+0x29c>)
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff fe0d 	bl	8000c70 <I2C_WaitOnFlagUntilTimeout>
 8001056:	2800      	cmp	r0, #0
 8001058:	d1f1      	bne.n	800103e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800105a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800105e:	2b01      	cmp	r3, #1
 8001060:	d0ed      	beq.n	800103e <HAL_I2C_Master_Receive+0x1e>
 8001062:	2301      	movs	r3, #1
 8001064:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800106e:	bf5e      	ittt	pl
 8001070:	681a      	ldrpl	r2, [r3, #0]
 8001072:	f042 0201 	orrpl.w	r2, r2, #1
 8001076:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800107e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001080:	2222      	movs	r2, #34	; 0x22
 8001082:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001086:	2210      	movs	r2, #16
 8001088:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800108c:	2200      	movs	r2, #0
 800108e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001090:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001094:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001096:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001098:	4a89      	ldr	r2, [pc, #548]	; (80012c0 <HAL_I2C_Master_Receive+0x2a0>)
 800109a:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800109c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800109e:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 80010a0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010a4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80010a8:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010aa:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80010ac:	d004      	beq.n	80010b8 <HAL_I2C_Master_Receive+0x98>
 80010ae:	2a01      	cmp	r2, #1
 80010b0:	d002      	beq.n	80010b8 <HAL_I2C_Master_Receive+0x98>
 80010b2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80010b6:	d104      	bne.n	80010c2 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e002      	b.n	80010c8 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80010c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010c4:	2a11      	cmp	r2, #17
 80010c6:	d0f7      	beq.n	80010b8 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	9500      	str	r5, [sp, #0]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff fdcc 	bl	8000c70 <I2C_WaitOnFlagUntilTimeout>
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	b138      	cbz	r0, 80010ec <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80010dc:	681b      	ldr	r3, [r3, #0]
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80010de:	05d8      	lsls	r0, r3, #23
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80010e0:	bf44      	itt	mi
 80010e2:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80010e6:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80010e8:	2601      	movs	r6, #1
 80010ea:	e7a9      	b.n	8001040 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ec:	6922      	ldr	r2, [r4, #16]
 80010ee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80010f2:	d123      	bne.n	800113c <HAL_I2C_Master_Receive+0x11c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80010f4:	f046 0601 	orr.w	r6, r6, #1
 80010f8:	b2f6      	uxtb	r6, r6
 80010fa:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010fc:	462b      	mov	r3, r5
 80010fe:	463a      	mov	r2, r7
 8001100:	4970      	ldr	r1, [pc, #448]	; (80012c4 <HAL_I2C_Master_Receive+0x2a4>)
 8001102:	4620      	mov	r0, r4
 8001104:	f7ff fd25 	bl	8000b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001108:	4606      	mov	r6, r0
 800110a:	2800      	cmp	r0, #0
 800110c:	d1ec      	bne.n	80010e8 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 800110e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	2a00      	cmp	r2, #0
 8001114:	d147      	bne.n	80011a6 <HAL_I2C_Master_Receive+0x186>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001116:	9003      	str	r0, [sp, #12]
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	9203      	str	r2, [sp, #12]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	9203      	str	r2, [sp, #12]
 8001120:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001128:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800112a:	2320      	movs	r3, #32
 800112c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001136:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800113a:	e781      	b.n	8001040 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800113c:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8001140:	f008 0806 	and.w	r8, r8, #6
 8001144:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001148:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800114a:	495f      	ldr	r1, [pc, #380]	; (80012c8 <HAL_I2C_Master_Receive+0x2a8>)
 800114c:	462b      	mov	r3, r5
 800114e:	463a      	mov	r2, r7
 8001150:	4620      	mov	r0, r4
 8001152:	f7ff fcfe 	bl	8000b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001156:	2800      	cmp	r0, #0
 8001158:	d1c6      	bne.n	80010e8 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800115a:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800115c:	4959      	ldr	r1, [pc, #356]	; (80012c4 <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800115e:	b2f6      	uxtb	r6, r6
 8001160:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001162:	463a      	mov	r2, r7
 8001164:	462b      	mov	r3, r5
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff fcf3 	bl	8000b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800116c:	4602      	mov	r2, r0
 800116e:	2800      	cmp	r0, #0
 8001170:	d1ba      	bne.n	80010e8 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	9007      	str	r0, [sp, #28]
 8001176:	6959      	ldr	r1, [r3, #20]
 8001178:	9107      	str	r1, [sp, #28]
 800117a:	6999      	ldr	r1, [r3, #24]
 800117c:	9107      	str	r1, [sp, #28]
 800117e:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001186:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001188:	4620      	mov	r0, r4
 800118a:	9500      	str	r5, [sp, #0]
 800118c:	463b      	mov	r3, r7
 800118e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001192:	f7ff fd6d 	bl	8000c70 <I2C_WaitOnFlagUntilTimeout>
 8001196:	6822      	ldr	r2, [r4, #0]
 8001198:	b108      	cbz	r0, 800119e <HAL_I2C_Master_Receive+0x17e>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800119a:	6813      	ldr	r3, [r2, #0]
 800119c:	e79f      	b.n	80010de <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800119e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80011a2:	6113      	str	r3, [r2, #16]
 80011a4:	e7aa      	b.n	80010fc <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 80011a6:	2a01      	cmp	r2, #1
 80011a8:	d12c      	bne.n	8001204 <HAL_I2C_Master_Receive+0x1e4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011b2:	9004      	str	r0, [sp, #16]
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	9204      	str	r2, [sp, #16]
 80011b8:	699a      	ldr	r2, [r3, #24]
 80011ba:	9204      	str	r2, [sp, #16]
 80011bc:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011c4:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011c6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80012cc <HAL_I2C_Master_Receive+0x2ac>
    while (hi2c->XferSize > 0U)
 80011ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0ac      	beq.n	800112a <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d87d      	bhi.n	80012d0 <HAL_I2C_Master_Receive+0x2b0>
        if (hi2c->XferSize == 1U)
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d130      	bne.n	800123a <HAL_I2C_Master_Receive+0x21a>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d8:	462a      	mov	r2, r5
 80011da:	4639      	mov	r1, r7
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fd18 	bl	8000c12 <I2C_WaitOnRXNEFlagUntilTimeout>
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d180      	bne.n	80010e8 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011ec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80011ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f0:	3301      	adds	r3, #1
 80011f2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80011f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011f6:	3b01      	subs	r3, #1
 80011f8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80011fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b29b      	uxth	r3, r3
 8001200:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001202:	e7e2      	b.n	80011ca <HAL_I2C_Master_Receive+0x1aa>
    else if (hi2c->XferSize == 2U)
 8001204:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001206:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001208:	d10d      	bne.n	8001226 <HAL_I2C_Master_Receive+0x206>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800120a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800120e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001216:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001218:	9005      	str	r0, [sp, #20]
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	9205      	str	r2, [sp, #20]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	9305      	str	r3, [sp, #20]
 8001222:	9b05      	ldr	r3, [sp, #20]
 8001224:	e7cf      	b.n	80011c6 <HAL_I2C_Master_Receive+0x1a6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800122a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800122c:	9006      	str	r0, [sp, #24]
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	9206      	str	r2, [sp, #24]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	9306      	str	r3, [sp, #24]
 8001236:	9b06      	ldr	r3, [sp, #24]
 8001238:	e7c5      	b.n	80011c6 <HAL_I2C_Master_Receive+0x1a6>
        else if (hi2c->XferSize == 2U)
 800123a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800123c:	9500      	str	r5, [sp, #0]
 800123e:	463b      	mov	r3, r7
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4641      	mov	r1, r8
 8001246:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001248:	d11a      	bne.n	8001280 <HAL_I2C_Master_Receive+0x260>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800124a:	f7ff fd11 	bl	8000c70 <I2C_WaitOnFlagUntilTimeout>
 800124e:	2800      	cmp	r0, #0
 8001250:	f47f af4a 	bne.w	80010e8 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001262:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001264:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001266:	1c53      	adds	r3, r2, #1
 8001268:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800126a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800126c:	3b01      	subs	r3, #1
 800126e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001270:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001272:	3b01      	subs	r3, #1
 8001274:	b29b      	uxth	r3, r3
 8001276:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001278:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	7053      	strb	r3, [r2, #1]
 800127e:	e7b6      	b.n	80011ee <HAL_I2C_Master_Receive+0x1ce>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001280:	f7ff fcf6 	bl	8000c70 <I2C_WaitOnFlagUntilTimeout>
 8001284:	4602      	mov	r2, r0
 8001286:	2800      	cmp	r0, #0
 8001288:	f47f af2e 	bne.w	80010e8 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001294:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001296:	6919      	ldr	r1, [r3, #16]
 8001298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800129a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800129c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800129e:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 80012a0:	3301      	adds	r3, #1
 80012a2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80012a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012a6:	3b01      	subs	r3, #1
 80012a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80012aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012b2:	4641      	mov	r1, r8
 80012b4:	463b      	mov	r3, r7
 80012b6:	4620      	mov	r0, r4
 80012b8:	e7c7      	b.n	800124a <HAL_I2C_Master_Receive+0x22a>
 80012ba:	bf00      	nop
 80012bc:	00100002 	.word	0x00100002
 80012c0:	ffff0000 	.word	0xffff0000
 80012c4:	00010002 	.word	0x00010002
 80012c8:	00010008 	.word	0x00010008
 80012cc:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d0:	462a      	mov	r2, r5
 80012d2:	4639      	mov	r1, r7
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fc9c 	bl	8000c12 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012da:	2800      	cmp	r0, #0
 80012dc:	f47f af04 	bne.w	80010e8 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80012e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ea:	1c53      	adds	r3, r2, #1
 80012ec:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80012ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012f0:	3b01      	subs	r3, #1
 80012f2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80012f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	6959      	ldr	r1, [r3, #20]
 8001300:	0749      	lsls	r1, r1, #29
 8001302:	f57f af62 	bpl.w	80011ca <HAL_I2C_Master_Receive+0x1aa>
 8001306:	e7b8      	b.n	800127a <HAL_I2C_Master_Receive+0x25a>

08001308 <HAL_I2C_GetState>:
  return hi2c->State;
 8001308:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800130c:	4770      	bx	lr
	...

08001310 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001312:	4604      	mov	r4, r0
 8001314:	2800      	cmp	r0, #0
 8001316:	d041      	beq.n	800139c <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001318:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800131c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001320:	b92b      	cbnz	r3, 800132e <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001322:	4b42      	ldr	r3, [pc, #264]	; (800142c <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001324:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001328:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800132a:	f001 fbf9 	bl	8002b20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800132e:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001330:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001332:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001336:	69d3      	ldr	r3, [r2, #28]
 8001338:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800133c:	f023 030f 	bic.w	r3, r3, #15
 8001340:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001342:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001344:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001346:	428b      	cmp	r3, r1
 8001348:	d031      	beq.n	80013ae <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800134a:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800134c:	2b00      	cmp	r3, #0
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800134e:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8001350:	bf14      	ite	ne
 8001352:	2520      	movne	r5, #32
 8001354:	2510      	moveq	r5, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001356:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001358:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 800135a:	bf98      	it	ls
 800135c:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800135e:	f000 fe7d 	bl	800205c <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001362:	6923      	ldr	r3, [r4, #16]
 8001364:	6961      	ldr	r1, [r4, #20]
 8001366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800136a:	d11b      	bne.n	80013a4 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800136c:	68e3      	ldr	r3, [r4, #12]
 800136e:	220a      	movs	r2, #10
 8001370:	b1b3      	cbz	r3, 80013a0 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001372:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001374:	fbb0 f3f3 	udiv	r3, r0, r3
 8001378:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800137a:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800137c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001380:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001382:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001386:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800138a:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800138c:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800138e:	1e99      	subs	r1, r3, #2
 8001390:	29fd      	cmp	r1, #253	; 0xfd
 8001392:	d90e      	bls.n	80013b2 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001394:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
 800139e:	e044      	b.n	800142a <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80013a0:	00eb      	lsls	r3, r5, #3
 80013a2:	e7e7      	b.n	8001374 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80013a4:	230a      	movs	r3, #10
 80013a6:	fbb0 f0f5 	udiv	r0, r0, r5
 80013aa:	4343      	muls	r3, r0
 80013ac:	e7e5      	b.n	800137a <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 80013ae:	2200      	movs	r2, #0
 80013b0:	e7ed      	b.n	800138e <HAL_I2S_Init+0x7e>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80013b2:	4313      	orrs	r3, r2
 80013b4:	6922      	ldr	r2, [r4, #16]
 80013b6:	6821      	ldr	r1, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80013b8:	68e5      	ldr	r5, [r4, #12]
 80013ba:	69a0      	ldr	r0, [r4, #24]
 80013bc:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800143c <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80013c0:	4313      	orrs	r3, r2
 80013c2:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80013c4:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 80013c8:	ea46 0203 	orr.w	r2, r6, r3
 80013cc:	69cf      	ldr	r7, [r1, #28]
 80013ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d2:	432a      	orrs	r2, r5
 80013d4:	4302      	orrs	r2, r0
 80013d6:	ea07 070c 	and.w	r7, r7, ip
 80013da:	433a      	orrs	r2, r7
 80013dc:	61ca      	str	r2, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80013de:	6a22      	ldr	r2, [r4, #32]
 80013e0:	2a01      	cmp	r2, #1
 80013e2:	d11d      	bne.n	8001420 <HAL_I2S_Init+0x110>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80013e4:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_I2S_Init+0x120>)
 80013e6:	6362      	str	r2, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80013e8:	4f12      	ldr	r7, [pc, #72]	; (8001434 <HAL_I2S_Init+0x124>)
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_I2S_Init+0x128>)
 80013ec:	42b9      	cmp	r1, r7
 80013ee:	bf18      	it	ne
 80013f0:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80013f4:	432b      	orrs	r3, r5
 80013f6:	69d1      	ldr	r1, [r2, #28]
 80013f8:	ea01 010c 	and.w	r1, r1, ip
 80013fc:	61d1      	str	r1, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80013fe:	2102      	movs	r1, #2
 8001400:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001402:	69d7      	ldr	r7, [r2, #28]
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	4303      	orrs	r3, r0

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
    {
      tmp = I2S_MODE_SLAVE_RX;
 800140a:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 800140e:	ea43 0307 	orr.w	r3, r3, r7
 8001412:	bf14      	ite	ne
 8001414:	2100      	movne	r1, #0
 8001416:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800141a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800141c:	430b      	orrs	r3, r1
 800141e:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001420:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001422:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001424:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001426:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 800142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800142c:	08001447 	.word	0x08001447
 8001430:	080017c9 	.word	0x080017c9
 8001434:	40003800 	.word	0x40003800
 8001438:	40003400 	.word	0x40003400
 800143c:	fffff040 	.word	0xfffff040

08001440 <HAL_I2S_TxCpltCallback>:
 8001440:	4770      	bx	lr

08001442 <HAL_I2S_RxCpltCallback>:
 8001442:	4770      	bx	lr

08001444 <HAL_I2S_ErrorCallback>:
 8001444:	4770      	bx	lr

08001446 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001446:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001448:	6803      	ldr	r3, [r0, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800144e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001452:	2a04      	cmp	r2, #4
{
 8001454:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001456:	d136      	bne.n	80014c6 <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001458:	9a01      	ldr	r2, [sp, #4]
 800145a:	07d1      	lsls	r1, r2, #31
 800145c:	d517      	bpl.n	800148e <I2S_IRQHandler+0x48>
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	0652      	lsls	r2, r2, #25
 8001462:	d514      	bpl.n	800148e <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001464:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001466:	68d9      	ldr	r1, [r3, #12]
 8001468:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 800146c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 800146e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001470:	3a01      	subs	r2, #1
 8001472:	b292      	uxth	r2, r2
 8001474:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001476:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001478:	b292      	uxth	r2, r2
 800147a:	b942      	cbnz	r2, 800148e <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001482:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001484:	2301      	movs	r3, #1
 8001486:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 800148a:	f7ff ffda 	bl	8001442 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800148e:	9b01      	ldr	r3, [sp, #4]
 8001490:	0659      	lsls	r1, r3, #25
 8001492:	d518      	bpl.n	80014c6 <I2S_IRQHandler+0x80>
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	0692      	lsls	r2, r2, #26
 800149a:	d514      	bpl.n	80014c6 <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80014a4:	2200      	movs	r2, #0
 80014a6:	9202      	str	r2, [sp, #8]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	9202      	str	r2, [sp, #8]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	9302      	str	r3, [sp, #8]
 80014b0:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80014b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff ffbf 	bl	8001444 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80014c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d136      	bne.n	800153c <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80014ce:	9b01      	ldr	r3, [sp, #4]
 80014d0:	079b      	lsls	r3, r3, #30
 80014d2:	d519      	bpl.n	8001508 <I2S_IRQHandler+0xc2>
 80014d4:	6822      	ldr	r2, [r4, #0]
 80014d6:	6853      	ldr	r3, [r2, #4]
 80014d8:	0618      	lsls	r0, r3, #24
 80014da:	d515      	bpl.n	8001508 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80014dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014de:	f833 1b02 	ldrh.w	r1, [r3], #2
 80014e2:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 80014e4:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80014e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80014ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b94b      	cbnz	r3, 8001508 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014f4:	6853      	ldr	r3, [r2, #4]
 80014f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80014fa:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ff9c 	bl	8001440 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001508:	9b01      	ldr	r3, [sp, #4]
 800150a:	0719      	lsls	r1, r3, #28
 800150c:	d516      	bpl.n	800153c <I2S_IRQHandler+0xf6>
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	0692      	lsls	r2, r2, #26
 8001514:	d512      	bpl.n	800153c <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800151c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800151e:	2200      	movs	r2, #0
 8001520:	9203      	str	r2, [sp, #12]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	9303      	str	r3, [sp, #12]
 8001526:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001528:	2301      	movs	r3, #1
 800152a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800152e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff ff84 	bl	8001444 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800153c:	b004      	add	sp, #16
 800153e:	bd10      	pop	{r4, pc}

08001540 <I2SEx_TxRxDMAError>:
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001540:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001542:	490d      	ldr	r1, [pc, #52]	; (8001578 <I2SEx_TxRxDMAError+0x38>)
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001544:	6802      	ldr	r2, [r0, #0]
 8001546:	6853      	ldr	r3, [r2, #4]
 8001548:	f023 0303 	bic.w	r3, r3, #3
 800154c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <I2SEx_TxRxDMAError+0x3c>)
 8001550:	428a      	cmp	r2, r1
 8001552:	bf18      	it	ne
 8001554:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	f022 0203 	bic.w	r2, r2, #3
 800155e:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001564:	8643      	strh	r3, [r0, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001566:	2301      	movs	r3, #1
 8001568:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800156c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6443      	str	r3, [r0, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001574:	f7ff bf66 	b.w	8001444 <HAL_I2S_ErrorCallback>
 8001578:	40003800 	.word	0x40003800
 800157c:	40003400 	.word	0x40003400

08001580 <HAL_I2SEx_TransmitReceive_DMA>:
{
 8001580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001584:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 8001586:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800158a:	b2c0      	uxtb	r0, r0
 800158c:	2801      	cmp	r0, #1
{
 800158e:	460e      	mov	r6, r1
 8001590:	4615      	mov	r5, r2
  if (hi2s->State != HAL_I2S_STATE_READY)
 8001592:	f040 80ad 	bne.w	80016f0 <HAL_I2SEx_TransmitReceive_DMA+0x170>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001596:	2900      	cmp	r1, #0
 8001598:	d05e      	beq.n	8001658 <HAL_I2SEx_TransmitReceive_DMA+0xd8>
 800159a:	2a00      	cmp	r2, #0
 800159c:	d05c      	beq.n	8001658 <HAL_I2SEx_TransmitReceive_DMA+0xd8>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d05a      	beq.n	8001658 <HAL_I2SEx_TransmitReceive_DMA+0xd8>
  __HAL_LOCK(hi2s);
 80015a2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80015a6:	2a01      	cmp	r2, #1
 80015a8:	f000 80a4 	beq.w	80016f4 <HAL_I2SEx_TransmitReceive_DMA+0x174>
  hi2s->pTxBuffPtr = pTxData;
 80015ac:	6261      	str	r1, [r4, #36]	; 0x24
  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015ae:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hi2s);
 80015b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015b4:	69ca      	ldr	r2, [r1, #28]
  hi2s->pRxBuffPtr = pRxData;
 80015b6:	62e5      	str	r5, [r4, #44]	; 0x2c
  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015b8:	f002 0207 	and.w	r2, r2, #7
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80015bc:	2a03      	cmp	r2, #3
 80015be:	d001      	beq.n	80015c4 <HAL_I2SEx_TransmitReceive_DMA+0x44>
 80015c0:	2a05      	cmp	r2, #5
 80015c2:	d101      	bne.n	80015c8 <HAL_I2SEx_TransmitReceive_DMA+0x48>
    hi2s->TxXferSize  = (Size << 1U);
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	b29b      	uxth	r3, r3
    hi2s->TxXferSize  = Size;
 80015c8:	8523      	strh	r3, [r4, #40]	; 0x28
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80015ca:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
    hi2s->TxXferCount = Size;
 80015ce:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80015d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2s->RxXferSize  = Size;
 80015d2:	8623      	strh	r3, [r4, #48]	; 0x30
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80015d4:	2200      	movs	r2, #0
    hi2s->RxXferCount = Size;
 80015d6:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80015d8:	2305      	movs	r3, #5
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80015da:	6462      	str	r2, [r4, #68]	; 0x44
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80015dc:	f8df e128 	ldr.w	lr, [pc, #296]	; 8001708 <HAL_I2SEx_TransmitReceive_DMA+0x188>
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80015e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80015e4:	4f44      	ldr	r7, [pc, #272]	; (80016f8 <HAL_I2SEx_TransmitReceive_DMA+0x178>)
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <HAL_I2SEx_TransmitReceive_DMA+0x17c>)
 80015e8:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80015ec:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80015f0:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80015f4:	64c3      	str	r3, [r0, #76]	; 0x4c
  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80015f6:	69cb      	ldr	r3, [r1, #28]
 80015f8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001704 <HAL_I2SEx_TransmitReceive_DMA+0x184>
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80015fc:	f413 7f80 	tst.w	r3, #256	; 0x100
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8001600:	e9c0 7e0f 	strd	r7, lr, [r0, #60]	; 0x3c
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8001604:	d139      	bne.n	800167a <HAL_I2SEx_TransmitReceive_DMA+0xfa>
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8001606:	4f3e      	ldr	r7, [pc, #248]	; (8001700 <HAL_I2SEx_TransmitReceive_DMA+0x180>)
 8001608:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800160a:	4541      	cmp	r1, r8
 800160c:	bf0c      	ite	eq
 800160e:	4639      	moveq	r1, r7
 8001610:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 8001614:	462a      	mov	r2, r5
 8001616:	310c      	adds	r1, #12
 8001618:	4660      	mov	r0, ip
 800161a:	f7ff f8a3 	bl	8000764 <HAL_DMA_Start_IT>
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800161e:	6822      	ldr	r2, [r4, #0]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001620:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8001622:	4542      	cmp	r2, r8
 8001624:	bf0c      	ite	eq
 8001626:	4639      	moveq	r1, r7
 8001628:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800162c:	320c      	adds	r2, #12
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800162e:	684b      	ldr	r3, [r1, #4]
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	604b      	str	r3, [r1, #4]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001636:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001638:	4631      	mov	r1, r6
 800163a:	f7ff f893 	bl	8000764 <HAL_DMA_Start_IT>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	f042 0202 	orr.w	r2, r2, #2
 8001646:	605a      	str	r2, [r3, #4]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001648:	69d8      	ldr	r0, [r3, #28]
 800164a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800164e:	d006      	beq.n	800165e <HAL_I2SEx_TransmitReceive_DMA+0xde>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001650:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2s);
 8001652:	2300      	movs	r3, #0
 8001654:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001658:	b002      	add	sp, #8
 800165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_I2SEXT_ENABLE(hi2s);
 800165e:	4543      	cmp	r3, r8
 8001660:	bf0c      	ite	eq
 8001662:	4639      	moveq	r1, r7
 8001664:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 8001668:	69ca      	ldr	r2, [r1, #28]
 800166a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800166e:	61ca      	str	r2, [r1, #28]
      __HAL_I2S_ENABLE(hi2s);
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001676:	61da      	str	r2, [r3, #28]
 8001678:	e7eb      	b.n	8001652 <HAL_I2SEx_TransmitReceive_DMA+0xd2>
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800167a:	69cb      	ldr	r3, [r1, #28]
 800167c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001684:	d105      	bne.n	8001692 <HAL_I2SEx_TransmitReceive_DMA+0x112>
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	68cb      	ldr	r3, [r1, #12]
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	688b      	ldr	r3, [r1, #8]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8001692:	4f1b      	ldr	r7, [pc, #108]	; (8001700 <HAL_I2SEx_TransmitReceive_DMA+0x180>)
 8001694:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001696:	4541      	cmp	r1, r8
 8001698:	bf0c      	ite	eq
 800169a:	4639      	moveq	r1, r7
 800169c:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 80016a0:	f101 020c 	add.w	r2, r1, #12
 80016a4:	4631      	mov	r1, r6
 80016a6:	f7ff f85d 	bl	8000764 <HAL_DMA_Start_IT>
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80016aa:	4e16      	ldr	r6, [pc, #88]	; (8001704 <HAL_I2SEx_TransmitReceive_DMA+0x184>)
 80016ac:	6821      	ldr	r1, [r4, #0]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80016ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80016b0:	42b1      	cmp	r1, r6
 80016b2:	bf0c      	ite	eq
 80016b4:	463a      	moveq	r2, r7
 80016b6:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80016ba:	310c      	adds	r1, #12
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80016bc:	6853      	ldr	r3, [r2, #4]
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	6053      	str	r3, [r2, #4]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80016c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80016c6:	462a      	mov	r2, r5
 80016c8:	f7ff f84c 	bl	8000764 <HAL_DMA_Start_IT>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	605a      	str	r2, [r3, #4]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80016d6:	69d8      	ldr	r0, [r3, #28]
 80016d8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80016dc:	d1b8      	bne.n	8001650 <HAL_I2SEx_TransmitReceive_DMA+0xd0>
      __HAL_I2SEXT_ENABLE(hi2s);
 80016de:	42b3      	cmp	r3, r6
 80016e0:	bf18      	it	ne
 80016e2:	f04f 2740 	movne.w	r7, #1073758208	; 0x40004000
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016ec:	61fa      	str	r2, [r7, #28]
 80016ee:	e7bf      	b.n	8001670 <HAL_I2SEx_TransmitReceive_DMA+0xf0>
    errorcode = HAL_BUSY;
 80016f0:	2002      	movs	r0, #2
 80016f2:	e7ae      	b.n	8001652 <HAL_I2SEx_TransmitReceive_DMA+0xd2>
  __HAL_LOCK(hi2s);
 80016f4:	2002      	movs	r0, #2
 80016f6:	e7af      	b.n	8001658 <HAL_I2SEx_TransmitReceive_DMA+0xd8>
 80016f8:	08001719 	.word	0x08001719
 80016fc:	08001541 	.word	0x08001541
 8001700:	40003400 	.word	0x40003400
 8001704:	40003800 	.word	0x40003800
 8001708:	0800170d 	.word	0x0800170d

0800170c <I2SEx_TxRxDMAHalfCplt>:
{
 800170c:	b508      	push	{r3, lr}
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800170e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001710:	f000 ff24 	bl	800255c <HAL_I2SEx_TxRxHalfCpltCallback>
}
 8001714:	bd08      	pop	{r3, pc}
	...

08001718 <I2SEx_TxRxDMACplt>:
{
 8001718:	b538      	push	{r3, r4, r5, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 800171a:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800171c:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 800171e:	4605      	mov	r5, r0
  if (hdma->Init.Mode == DMA_NORMAL)
 8001720:	2b00      	cmp	r3, #0
 8001722:	d140      	bne.n	80017a6 <I2SEx_TxRxDMACplt+0x8e>
    if (hi2s->hdmarx == hdma)
 8001724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001726:	4283      	cmp	r3, r0
 8001728:	d120      	bne.n	800176c <I2SEx_TxRxDMACplt+0x54>
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001732:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001736:	d003      	beq.n	8001740 <I2SEx_TxRxDMACplt+0x28>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001738:	69da      	ldr	r2, [r3, #28]
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800173a:	f412 7f40 	tst.w	r2, #768	; 0x300
 800173e:	d106      	bne.n	800174e <I2SEx_TxRxDMACplt+0x36>
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8001740:	491f      	ldr	r1, [pc, #124]	; (80017c0 <I2SEx_TxRxDMACplt+0xa8>)
 8001742:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <I2SEx_TxRxDMACplt+0xac>)
 8001744:	428b      	cmp	r3, r1
 8001746:	bf0c      	ite	eq
 8001748:	4613      	moveq	r3, r2
 800174a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	605a      	str	r2, [r3, #4]
      hi2s->RxXferCount = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	8663      	strh	r3, [r4, #50]	; 0x32
      if (hi2s->TxXferCount == 0U)
 800175a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	b92b      	cbnz	r3, 800176c <I2SEx_TxRxDMACplt+0x54>
        hi2s->State = HAL_I2S_STATE_READY;
 8001760:	2301      	movs	r3, #1
 8001762:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001766:	4620      	mov	r0, r4
 8001768:	f000 ff02 	bl	8002570 <HAL_I2SEx_TxRxCpltCallback>
    if (hi2s->hdmatx == hdma)
 800176c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800176e:	42ab      	cmp	r3, r5
 8001770:	d119      	bne.n	80017a6 <I2SEx_TxRxDMACplt+0x8e>
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800177a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800177e:	d003      	beq.n	8001788 <I2SEx_TxRxDMACplt+0x70>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001780:	69da      	ldr	r2, [r3, #28]
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001782:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001786:	d112      	bne.n	80017ae <I2SEx_TxRxDMACplt+0x96>
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	f022 0202 	bic.w	r2, r2, #2
 800178e:	605a      	str	r2, [r3, #4]
      hi2s->TxXferCount = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2s->RxXferCount == 0U)
 8001794:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001796:	b29b      	uxth	r3, r3
 8001798:	b92b      	cbnz	r3, 80017a6 <I2SEx_TxRxDMACplt+0x8e>
        hi2s->State = HAL_I2S_STATE_READY;
 800179a:	2301      	movs	r3, #1
 800179c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017a0:	4620      	mov	r0, r4
 80017a2:	f000 fee5 	bl	8002570 <HAL_I2SEx_TxRxCpltCallback>
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 fee2 	bl	8002570 <HAL_I2SEx_TxRxCpltCallback>
}
 80017ac:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80017ae:	4904      	ldr	r1, [pc, #16]	; (80017c0 <I2SEx_TxRxDMACplt+0xa8>)
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <I2SEx_TxRxDMACplt+0xac>)
 80017b2:	428b      	cmp	r3, r1
 80017b4:	bf0c      	ite	eq
 80017b6:	4613      	moveq	r3, r2
 80017b8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80017bc:	e7e4      	b.n	8001788 <I2SEx_TxRxDMACplt+0x70>
 80017be:	bf00      	nop
 80017c0:	40003800 	.word	0x40003800
 80017c4:	40003400 	.word	0x40003400

080017c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80017c8:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80017ca:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80017cc:	498e      	ldr	r1, [pc, #568]	; (8001a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80017ce:	6893      	ldr	r3, [r2, #8]
{
 80017d0:	b086      	sub	sp, #24
 80017d2:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80017d4:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80017d6:	4b8d      	ldr	r3, [pc, #564]	; (8001a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80017d8:	428a      	cmp	r2, r1
 80017da:	bf18      	it	ne
 80017dc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80017e4:	6851      	ldr	r1, [r2, #4]
 80017e6:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80017ec:	6841      	ldr	r1, [r0, #4]
 80017ee:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80017f2:	f040 8093 	bne.w	800191c <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80017f6:	9b00      	ldr	r3, [sp, #0]
 80017f8:	0799      	lsls	r1, r3, #30
 80017fa:	d51a      	bpl.n	8001832 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 80017fc:	9b02      	ldr	r3, [sp, #8]
 80017fe:	061b      	lsls	r3, r3, #24
 8001800:	d517      	bpl.n	8001832 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001802:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001804:	1c99      	adds	r1, r3, #2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	6241      	str	r1, [r0, #36]	; 0x24
 800180a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800180c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800180e:	3b01      	subs	r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001814:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	b95b      	cbnz	r3, 8001832 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800181a:	6853      	ldr	r3, [r2, #4]
 800181c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001820:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001822:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001824:	b29b      	uxth	r3, r3
 8001826:	b923      	cbnz	r3, 8001832 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001828:	2301      	movs	r3, #1
 800182a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800182e:	f000 fe9f 	bl	8002570 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001832:	9b01      	ldr	r3, [sp, #4]
 8001834:	07d8      	lsls	r0, r3, #31
 8001836:	d522      	bpl.n	800187e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8001838:	9b03      	ldr	r3, [sp, #12]
 800183a:	0659      	lsls	r1, r3, #25
 800183c:	d51f      	bpl.n	800187e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800183e:	6821      	ldr	r1, [r4, #0]
 8001840:	4a71      	ldr	r2, [pc, #452]	; (8001a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8001844:	4291      	cmp	r1, r2
 8001846:	bf18      	it	ne
 8001848:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800184c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800184e:	68d9      	ldr	r1, [r3, #12]
 8001850:	1c90      	adds	r0, r2, #2
 8001852:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001854:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001856:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001858:	3a01      	subs	r2, #1
 800185a:	b292      	uxth	r2, r2
 800185c:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800185e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001860:	b292      	uxth	r2, r2
 8001862:	b962      	cbnz	r2, 800187e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800186a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800186c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	b92b      	cbnz	r3, 800187e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001872:	2301      	movs	r3, #1
 8001874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001878:	4620      	mov	r0, r4
 800187a:	f000 fe79 	bl	8002570 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800187e:	9b01      	ldr	r3, [sp, #4]
 8001880:	065a      	lsls	r2, r3, #25
 8001882:	d522      	bpl.n	80018ca <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8001884:	9b03      	ldr	r3, [sp, #12]
 8001886:	069b      	lsls	r3, r3, #26
 8001888:	d51f      	bpl.n	80018ca <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	495e      	ldr	r1, [pc, #376]	; (8001a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800188e:	4a5f      	ldr	r2, [pc, #380]	; (8001a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8001890:	428b      	cmp	r3, r1
 8001892:	bf18      	it	ne
 8001894:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001898:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800189a:	6851      	ldr	r1, [r2, #4]
 800189c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80018a0:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018a8:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018aa:	2200      	movs	r2, #0
 80018ac:	9204      	str	r2, [sp, #16]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	9204      	str	r2, [sp, #16]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	9304      	str	r3, [sp, #16]
 80018b6:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80018be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80018c6:	f7ff fdbd 	bl	8001444 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80018ca:	9b00      	ldr	r3, [sp, #0]
 80018cc:	0718      	lsls	r0, r3, #28
 80018ce:	f140 8098 	bpl.w	8001a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 80018d2:	9b02      	ldr	r3, [sp, #8]
 80018d4:	0699      	lsls	r1, r3, #26
 80018d6:	f140 8094 	bpl.w	8001a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018da:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018dc:	494a      	ldr	r1, [pc, #296]	; (8001a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018e4:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e6:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80018e8:	428b      	cmp	r3, r1
 80018ea:	bf18      	it	ne
 80018ec:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80018f0:	6851      	ldr	r1, [r2, #4]
 80018f2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80018f6:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80018f8:	2200      	movs	r2, #0
 80018fa:	9205      	str	r2, [sp, #20]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	9305      	str	r3, [sp, #20]
 8001900:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001902:	2301      	movs	r3, #1
 8001904:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001908:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800190a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001912:	b006      	add	sp, #24
 8001914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8001918:	f7ff bd94 	b.w	8001444 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800191c:	9a01      	ldr	r2, [sp, #4]
 800191e:	0792      	lsls	r2, r2, #30
 8001920:	d51a      	bpl.n	8001958 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8001922:	9a03      	ldr	r2, [sp, #12]
 8001924:	0611      	lsls	r1, r2, #24
 8001926:	d517      	bpl.n	8001958 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001928:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800192a:	1c91      	adds	r1, r2, #2
 800192c:	8812      	ldrh	r2, [r2, #0]
 800192e:	6241      	str	r1, [r0, #36]	; 0x24
 8001930:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001932:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001934:	3a01      	subs	r2, #1
 8001936:	b292      	uxth	r2, r2
 8001938:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800193a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800193c:	b292      	uxth	r2, r2
 800193e:	b95a      	cbnz	r2, 8001958 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001946:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8001948:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800194a:	b29b      	uxth	r3, r3
 800194c:	b923      	cbnz	r3, 8001958 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 800194e:	2301      	movs	r3, #1
 8001950:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001954:	f000 fe0c 	bl	8002570 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001958:	9b00      	ldr	r3, [sp, #0]
 800195a:	07da      	lsls	r2, r3, #31
 800195c:	d51c      	bpl.n	8001998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 800195e:	9b02      	ldr	r3, [sp, #8]
 8001960:	065b      	lsls	r3, r3, #25
 8001962:	d519      	bpl.n	8001998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001964:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001966:	6822      	ldr	r2, [r4, #0]
 8001968:	1c98      	adds	r0, r3, #2
 800196a:	68d1      	ldr	r1, [r2, #12]
 800196c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800196e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001970:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001972:	3b01      	subs	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001978:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800197a:	b29b      	uxth	r3, r3
 800197c:	b963      	cbnz	r3, 8001998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800197e:	6853      	ldr	r3, [r2, #4]
 8001980:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001984:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001986:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	b92b      	cbnz	r3, 8001998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 800198c:	2301      	movs	r3, #1
 800198e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001992:	4620      	mov	r0, r4
 8001994:	f000 fdec 	bl	8002570 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001998:	9b00      	ldr	r3, [sp, #0]
 800199a:	0658      	lsls	r0, r3, #25
 800199c:	d51b      	bpl.n	80019d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 800199e:	9b02      	ldr	r3, [sp, #8]
 80019a0:	0699      	lsls	r1, r3, #26
 80019a2:	d518      	bpl.n	80019d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019a4:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019a6:	4918      	ldr	r1, [pc, #96]	; (8001a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019a8:	6853      	ldr	r3, [r2, #4]
 80019aa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80019ae:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80019b2:	428a      	cmp	r2, r1
 80019b4:	bf18      	it	ne
 80019b6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80019ba:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019c2:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80019ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80019d2:	f7ff fd37 	bl	8001444 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80019d6:	9b01      	ldr	r3, [sp, #4]
 80019d8:	071a      	lsls	r2, r3, #28
 80019da:	d512      	bpl.n	8001a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 80019dc:	9b03      	ldr	r3, [sp, #12]
 80019de:	069b      	lsls	r3, r3, #26
 80019e0:	d50f      	bpl.n	8001a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	4908      	ldr	r1, [pc, #32]	; (8001a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80019e8:	428a      	cmp	r2, r1
 80019ea:	bf18      	it	ne
 80019ec:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80019f6:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019f8:	6853      	ldr	r3, [r2, #4]
 80019fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80019fe:	6053      	str	r3, [r2, #4]
 8001a00:	e77f      	b.n	8001902 <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8001a02:	b006      	add	sp, #24
 8001a04:	bd10      	pop	{r4, pc}
 8001a06:	bf00      	nop
 8001a08:	40003800 	.word	0x40003800
 8001a0c:	40003400 	.word	0x40003400

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a14:	4604      	mov	r4, r0
 8001a16:	b908      	cbnz	r0, 8001a1c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
 8001a1a:	e03f      	b.n	8001a9c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1c:	6803      	ldr	r3, [r0, #0]
 8001a1e:	07dd      	lsls	r5, r3, #31
 8001a20:	d410      	bmi.n	8001a44 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	0798      	lsls	r0, r3, #30
 8001a26:	d45a      	bmi.n	8001ade <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	071a      	lsls	r2, r3, #28
 8001a2c:	f100 809c 	bmi.w	8001b68 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	075b      	lsls	r3, r3, #29
 8001a34:	f100 80ba 	bmi.w	8001bac <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a38:	69a0      	ldr	r0, [r4, #24]
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	f040 811b 	bne.w	8001c76 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001a40:	2000      	movs	r0, #0
 8001a42:	e02b      	b.n	8001a9c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a44:	4ba7      	ldr	r3, [pc, #668]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	f002 020c 	and.w	r2, r2, #12
 8001a4c:	2a04      	cmp	r2, #4
 8001a4e:	d007      	beq.n	8001a60 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a56:	2a08      	cmp	r2, #8
 8001a58:	d10a      	bne.n	8001a70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0259      	lsls	r1, r3, #9
 8001a5e:	d507      	bpl.n	8001a70 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	4ba0      	ldr	r3, [pc, #640]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	039a      	lsls	r2, r3, #14
 8001a66:	d5dc      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x12>
 8001a68:	6863      	ldr	r3, [r4, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1d9      	bne.n	8001a22 <HAL_RCC_OscConfig+0x12>
 8001a6e:	e7d3      	b.n	8001a18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a70:	6863      	ldr	r3, [r4, #4]
 8001a72:	4d9c      	ldr	r5, [pc, #624]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d113      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x92>
 8001a7a:	682b      	ldr	r3, [r5, #0]
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a82:	f7fe fd6b 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4d97      	ldr	r5, [pc, #604]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	682b      	ldr	r3, [r5, #0]
 8001a8c:	039b      	lsls	r3, r3, #14
 8001a8e:	d4c8      	bmi.n	8001a22 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a90:	f7fe fd64 	bl	800055c <HAL_GetTick>
 8001a94:	1b80      	subs	r0, r0, r6
 8001a96:	2864      	cmp	r0, #100	; 0x64
 8001a98:	d9f7      	bls.n	8001a8a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001a9a:	2003      	movs	r0, #3
}
 8001a9c:	b002      	add	sp, #8
 8001a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa6:	d104      	bne.n	8001ab2 <HAL_RCC_OscConfig+0xa2>
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aae:	602b      	str	r3, [r5, #0]
 8001ab0:	e7e3      	b.n	8001a7a <HAL_RCC_OscConfig+0x6a>
 8001ab2:	682a      	ldr	r2, [r5, #0]
 8001ab4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ab8:	602a      	str	r2, [r5, #0]
 8001aba:	682a      	ldr	r2, [r5, #0]
 8001abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1dd      	bne.n	8001a82 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001ac6:	f7fe fd49 	bl	800055c <HAL_GetTick>
 8001aca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001acc:	682b      	ldr	r3, [r5, #0]
 8001ace:	039f      	lsls	r7, r3, #14
 8001ad0:	d5a7      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad2:	f7fe fd43 	bl	800055c <HAL_GetTick>
 8001ad6:	1b80      	subs	r0, r0, r6
 8001ad8:	2864      	cmp	r0, #100	; 0x64
 8001ada:	d9f7      	bls.n	8001acc <HAL_RCC_OscConfig+0xbc>
 8001adc:	e7dd      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ade:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	f012 0f0c 	tst.w	r2, #12
 8001ae6:	d007      	beq.n	8001af8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aee:	2a08      	cmp	r2, #8
 8001af0:	d111      	bne.n	8001b16 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	025e      	lsls	r6, r3, #9
 8001af6:	d40e      	bmi.n	8001b16 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af8:	4b7a      	ldr	r3, [pc, #488]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	0795      	lsls	r5, r2, #30
 8001afe:	d502      	bpl.n	8001b06 <HAL_RCC_OscConfig+0xf6>
 8001b00:	68e2      	ldr	r2, [r4, #12]
 8001b02:	2a01      	cmp	r2, #1
 8001b04:	d188      	bne.n	8001a18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	6921      	ldr	r1, [r4, #16]
 8001b0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b14:	e788      	b.n	8001a28 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b16:	68e2      	ldr	r2, [r4, #12]
 8001b18:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x2d8>)
 8001b1a:	b1b2      	cbz	r2, 8001b4a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b20:	f7fe fd1c 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	4d6f      	ldr	r5, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001b26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	0798      	lsls	r0, r3, #30
 8001b2c:	d507      	bpl.n	8001b3e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	6922      	ldr	r2, [r4, #16]
 8001b32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b3a:	602b      	str	r3, [r5, #0]
 8001b3c:	e774      	b.n	8001a28 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7fe fd0d 	bl	800055c <HAL_GetTick>
 8001b42:	1b80      	subs	r0, r0, r6
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d9ef      	bls.n	8001b28 <HAL_RCC_OscConfig+0x118>
 8001b48:	e7a7      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b4c:	f7fe fd06 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b50:	4d64      	ldr	r5, [pc, #400]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001b52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	0799      	lsls	r1, r3, #30
 8001b58:	f57f af66 	bpl.w	8001a28 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7fe fcfe 	bl	800055c <HAL_GetTick>
 8001b60:	1b80      	subs	r0, r0, r6
 8001b62:	2802      	cmp	r0, #2
 8001b64:	d9f6      	bls.n	8001b54 <HAL_RCC_OscConfig+0x144>
 8001b66:	e798      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b68:	6962      	ldr	r2, [r4, #20]
 8001b6a:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_RCC_OscConfig+0x2dc>)
 8001b6c:	b17a      	cbz	r2, 8001b8e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b72:	f7fe fcf3 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	4d5b      	ldr	r5, [pc, #364]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b7c:	079f      	lsls	r7, r3, #30
 8001b7e:	f53f af57 	bmi.w	8001a30 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b82:	f7fe fceb 	bl	800055c <HAL_GetTick>
 8001b86:	1b80      	subs	r0, r0, r6
 8001b88:	2802      	cmp	r0, #2
 8001b8a:	d9f6      	bls.n	8001b7a <HAL_RCC_OscConfig+0x16a>
 8001b8c:	e785      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b90:	f7fe fce4 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4d53      	ldr	r5, [pc, #332]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b9a:	0798      	lsls	r0, r3, #30
 8001b9c:	f57f af48 	bpl.w	8001a30 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7fe fcdc 	bl	800055c <HAL_GetTick>
 8001ba4:	1b80      	subs	r0, r0, r6
 8001ba6:	2802      	cmp	r0, #2
 8001ba8:	d9f6      	bls.n	8001b98 <HAL_RCC_OscConfig+0x188>
 8001baa:	e776      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bac:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001bb4:	d128      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	4d48      	ldr	r5, [pc, #288]	; (8001cf0 <HAL_RCC_OscConfig+0x2e0>)
 8001bce:	682b      	ldr	r3, [r5, #0]
 8001bd0:	05d9      	lsls	r1, r3, #23
 8001bd2:	d51b      	bpl.n	8001c0c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	68a3      	ldr	r3, [r4, #8]
 8001bd6:	4d43      	ldr	r5, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d127      	bne.n	8001c2c <HAL_RCC_OscConfig+0x21c>
 8001bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001be4:	f7fe fcba 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4d3e      	ldr	r5, [pc, #248]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001bea:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bf2:	079b      	lsls	r3, r3, #30
 8001bf4:	d539      	bpl.n	8001c6a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	f43f af1e 	beq.w	8001a38 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4a39      	ldr	r2, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001bfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	e717      	b.n	8001a38 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001c08:	2600      	movs	r6, #0
 8001c0a:	e7df      	b.n	8001bcc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c14:	f7fe fca2 	bl	800055c <HAL_GetTick>
 8001c18:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	05da      	lsls	r2, r3, #23
 8001c1e:	d4d9      	bmi.n	8001bd4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c20:	f7fe fc9c 	bl	800055c <HAL_GetTick>
 8001c24:	1bc0      	subs	r0, r0, r7
 8001c26:	2802      	cmp	r0, #2
 8001c28:	d9f7      	bls.n	8001c1a <HAL_RCC_OscConfig+0x20a>
 8001c2a:	e736      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d104      	bne.n	8001c3a <HAL_RCC_OscConfig+0x22a>
 8001c30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	672b      	str	r3, [r5, #112]	; 0x70
 8001c38:	e7d0      	b.n	8001bdc <HAL_RCC_OscConfig+0x1cc>
 8001c3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	672a      	str	r2, [r5, #112]	; 0x70
 8001c42:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c44:	f022 0204 	bic.w	r2, r2, #4
 8001c48:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ca      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001c4e:	f7fe fc85 	bl	800055c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c56:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c5a:	0798      	lsls	r0, r3, #30
 8001c5c:	d5cb      	bpl.n	8001bf6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7fe fc7d 	bl	800055c <HAL_GetTick>
 8001c62:	1bc0      	subs	r0, r0, r7
 8001c64:	4540      	cmp	r0, r8
 8001c66:	d9f7      	bls.n	8001c58 <HAL_RCC_OscConfig+0x248>
 8001c68:	e717      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7fe fc77 	bl	800055c <HAL_GetTick>
 8001c6e:	1bc0      	subs	r0, r0, r7
 8001c70:	4540      	cmp	r0, r8
 8001c72:	d9bd      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1e0>
 8001c74:	e711      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c76:	4d1b      	ldr	r5, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
 8001c78:	68ab      	ldr	r3, [r5, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d047      	beq.n	8001d12 <HAL_RCC_OscConfig+0x302>
 8001c82:	4e1c      	ldr	r6, [pc, #112]	; (8001cf4 <HAL_RCC_OscConfig+0x2e4>)
 8001c84:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c86:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c88:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8a:	d135      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fc66 	bl	800055c <HAL_GetTick>
 8001c90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	0199      	lsls	r1, r3, #6
 8001c96:	d41e      	bmi.n	8001cd6 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c98:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ca0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ca4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ca6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001caa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	4c0d      	ldr	r4, [pc, #52]	; (8001ce4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cae:	0852      	lsrs	r2, r2, #1
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cb6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cb8:	2301      	movs	r3, #1
 8001cba:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fc4e 	bl	800055c <HAL_GetTick>
 8001cc0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	019a      	lsls	r2, r3, #6
 8001cc6:	f53f aebb 	bmi.w	8001a40 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cca:	f7fe fc47 	bl	800055c <HAL_GetTick>
 8001cce:	1b40      	subs	r0, r0, r5
 8001cd0:	2802      	cmp	r0, #2
 8001cd2:	d9f6      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x2b2>
 8001cd4:	e6e1      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe fc41 	bl	800055c <HAL_GetTick>
 8001cda:	1bc0      	subs	r0, r0, r7
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	d9d8      	bls.n	8001c92 <HAL_RCC_OscConfig+0x282>
 8001ce0:	e6db      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	42470000 	.word	0x42470000
 8001cec:	42470e80 	.word	0x42470e80
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001cf8:	f7fe fc30 	bl	800055c <HAL_GetTick>
 8001cfc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	682b      	ldr	r3, [r5, #0]
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	f57f ae9d 	bpl.w	8001a40 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe fc29 	bl	800055c <HAL_GetTick>
 8001d0a:	1b00      	subs	r0, r0, r4
 8001d0c:	2802      	cmp	r0, #2
 8001d0e:	d9f6      	bls.n	8001cfe <HAL_RCC_OscConfig+0x2ee>
 8001d10:	e6c3      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d12:	2801      	cmp	r0, #1
 8001d14:	f43f aec2 	beq.w	8001a9c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001d18:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	69e3      	ldr	r3, [r4, #28]
 8001d1c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f47f ae79 	bne.w	8001a18 <HAL_RCC_OscConfig+0x8>
 8001d26:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d28:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	f47f ae73 	bne.w	8001a18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d38:	4003      	ands	r3, r0
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	f47f ae6c 	bne.w	8001a18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d42:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d46:	4293      	cmp	r3, r2
 8001d48:	f47f ae66 	bne.w	8001a18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d4e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001d52:	1ac0      	subs	r0, r0, r3
 8001d54:	bf18      	it	ne
 8001d56:	2001      	movne	r0, #1
 8001d58:	e6a0      	b.n	8001a9c <HAL_RCC_OscConfig+0x8c>
 8001d5a:	bf00      	nop

08001d5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d5c:	4913      	ldr	r1, [pc, #76]	; (8001dac <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001d5e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d60:	688b      	ldr	r3, [r1, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x16>
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d6e:	4810      	ldr	r0, [pc, #64]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8001d72:	4810      	ldr	r0, [pc, #64]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8001d74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d76:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d78:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d80:	bf14      	ite	ne
 8001d82:	480c      	ldrne	r0, [pc, #48]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d84:	480a      	ldreq	r0, [pc, #40]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d8a:	bf18      	it	ne
 8001d8c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	fba1 0100 	umull	r0, r1, r1, r0
 8001d96:	f7fe fa17 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_GetSysClockFreq+0x50>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001da2:	3301      	adds	r3, #1
 8001da4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001da6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001daa:	e7e3      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x18>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200

08001db8 <HAL_RCC_ClockConfig>:
{
 8001db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	b910      	cbnz	r0, 8001dc8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001dc2:	2001      	movs	r0, #1
}
 8001dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_ClockConfig+0x120>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f002 020f 	and.w	r2, r2, #15
 8001dd0:	428a      	cmp	r2, r1
 8001dd2:	d328      	bcc.n	8001e26 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	6821      	ldr	r1, [r4, #0]
 8001dd6:	078f      	lsls	r7, r1, #30
 8001dd8:	d42d      	bmi.n	8001e36 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	07c8      	lsls	r0, r1, #31
 8001ddc:	d440      	bmi.n	8001e60 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_RCC_ClockConfig+0x120>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f002 020f 	and.w	r2, r2, #15
 8001de6:	42aa      	cmp	r2, r5
 8001de8:	d865      	bhi.n	8001eb6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	0751      	lsls	r1, r2, #29
 8001dee:	d46b      	bmi.n	8001ec8 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	0713      	lsls	r3, r2, #28
 8001df2:	d507      	bpl.n	8001e04 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df4:	4a39      	ldr	r2, [pc, #228]	; (8001edc <HAL_RCC_ClockConfig+0x124>)
 8001df6:	6921      	ldr	r1, [r4, #16]
 8001df8:	6893      	ldr	r3, [r2, #8]
 8001dfa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001dfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e02:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e04:	f7ff ffaa 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_ClockConfig+0x124>)
 8001e0a:	4a35      	ldr	r2, [pc, #212]	; (8001ee0 <HAL_RCC_ClockConfig+0x128>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	40d8      	lsrs	r0, r3
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_RCC_ClockConfig+0x12c>)
 8001e18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <HAL_RCC_ClockConfig+0x130>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f7fe fb53 	bl	80004c8 <HAL_InitTick>
  return HAL_OK;
 8001e22:	2000      	movs	r0, #0
 8001e24:	e7ce      	b.n	8001dc4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d1c6      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xa>
 8001e34:	e7ce      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1c>
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	bf1e      	ittt	ne
 8001e3e:	689a      	ldrne	r2, [r3, #8]
 8001e40:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001e44:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	bf42      	ittt	mi
 8001e4a:	689a      	ldrmi	r2, [r3, #8]
 8001e4c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001e50:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	68a0      	ldr	r0, [r4, #8]
 8001e56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e5a:	4302      	orrs	r2, r0
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	e7bc      	b.n	8001dda <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e60:	6862      	ldr	r2, [r4, #4]
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_ClockConfig+0x124>)
 8001e64:	2a01      	cmp	r2, #1
 8001e66:	d11c      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	d0a8      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e70:	4e1a      	ldr	r6, [pc, #104]	; (8001edc <HAL_RCC_ClockConfig+0x124>)
 8001e72:	68b3      	ldr	r3, [r6, #8]
 8001e74:	f023 0303 	bic.w	r3, r3, #3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001e7c:	f7fe fb6e 	bl	800055c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e84:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	68b3      	ldr	r3, [r6, #8]
 8001e88:	6862      	ldr	r2, [r4, #4]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e92:	d0a4      	beq.n	8001dde <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7fe fb62 	bl	800055c <HAL_GetTick>
 8001e98:	1bc0      	subs	r0, r0, r7
 8001e9a:	4540      	cmp	r0, r8
 8001e9c:	d9f3      	bls.n	8001e86 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	e790      	b.n	8001dc4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea2:	1e91      	subs	r1, r2, #2
 8001ea4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001eae:	e7de      	b.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	f013 0f02 	tst.w	r3, #2
 8001eb4:	e7db      	b.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	b2ea      	uxtb	r2, r5
 8001eb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	42ab      	cmp	r3, r5
 8001ec2:	f47f af7e 	bne.w	8001dc2 <HAL_RCC_ClockConfig+0xa>
 8001ec6:	e790      	b.n	8001dea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4904      	ldr	r1, [pc, #16]	; (8001edc <HAL_RCC_ClockConfig+0x124>)
 8001eca:	68e0      	ldr	r0, [r4, #12]
 8001ecc:	688b      	ldr	r3, [r1, #8]
 8001ece:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ed2:	4303      	orrs	r3, r0
 8001ed4:	608b      	str	r3, [r1, #8]
 8001ed6:	e78b      	b.n	8001df0 <HAL_RCC_ClockConfig+0x38>
 8001ed8:	40023c00 	.word	0x40023c00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	0800af08 	.word	0x0800af08
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001efa:	6810      	ldr	r0, [r2, #0]
}
 8001efc:	40d8      	lsrs	r0, r3
 8001efe:	4770      	bx	lr
 8001f00:	40023800 	.word	0x40023800
 8001f04:	0800af18 	.word	0x0800af18
 8001f08:	20000008 	.word	0x20000008

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f1a:	6810      	ldr	r0, [r2, #0]
}
 8001f1c:	40d8      	lsrs	r0, r3
 8001f1e:	4770      	bx	lr
 8001f20:	40023800 	.word	0x40023800
 8001f24:	0800af18 	.word	0x0800af18
 8001f28:	20000008 	.word	0x20000008

08001f2c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f2c:	6803      	ldr	r3, [r0, #0]
 8001f2e:	f013 0f05 	tst.w	r3, #5
{
 8001f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f34:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f36:	d105      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f38:	6828      	ldr	r0, [r5, #0]
 8001f3a:	f010 0002 	ands.w	r0, r0, #2
 8001f3e:	d128      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8001f40:	b003      	add	sp, #12
 8001f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001f44:	4c41      	ldr	r4, [pc, #260]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f46:	4e42      	ldr	r6, [pc, #264]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fb06 	bl	800055c <HAL_GetTick>
 8001f50:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f52:	6833      	ldr	r3, [r6, #0]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	d415      	bmi.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f58:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8001f5c:	071b      	lsls	r3, r3, #28
 8001f5e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f62:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001f66:	2301      	movs	r3, #1
 8001f68:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f6a:	f7fe faf7 	bl	800055c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f6e:	4c38      	ldr	r4, [pc, #224]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8001f70:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	0118      	lsls	r0, r3, #4
 8001f76:	d4df      	bmi.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f78:	f7fe faf0 	bl	800055c <HAL_GetTick>
 8001f7c:	1b80      	subs	r0, r0, r6
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	d9f7      	bls.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001f82:	e004      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f84:	f7fe faea 	bl	800055c <HAL_GetTick>
 8001f88:	1bc0      	subs	r0, r0, r7
 8001f8a:	2802      	cmp	r0, #2
 8001f8c:	d9e1      	bls.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001f8e:	2003      	movs	r0, #3
 8001f90:	e7d6      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8001f98:	4c2e      	ldr	r4, [pc, #184]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001fb4:	f7fe fad2 	bl	800055c <HAL_GetTick>
 8001fb8:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	05d9      	lsls	r1, r3, #23
 8001fbe:	d51b      	bpl.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc0:	4c23      	ldr	r4, [pc, #140]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001fc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fca:	68eb      	ldr	r3, [r5, #12]
 8001fcc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001fd0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001fd6:	d134      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001fd8:	6891      	ldr	r1, [r2, #8]
 8001fda:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001fde:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001fe2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001fe6:	4301      	orrs	r1, r0
 8001fe8:	6091      	str	r1, [r2, #8]
 8001fea:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	e7a3      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ff8:	f7fe fab0 	bl	800055c <HAL_GetTick>
 8001ffc:	1b80      	subs	r0, r0, r6
 8001ffe:	2802      	cmp	r0, #2
 8002000:	d9db      	bls.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002002:	e7c4      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002004:	68ea      	ldr	r2, [r5, #12]
 8002006:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800200a:	4293      	cmp	r3, r2
 800200c:	d0dd      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800200e:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002010:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002012:	2101      	movs	r1, #1
 8002014:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800201a:	2100      	movs	r1, #0
 800201c:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800201e:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002020:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002022:	07da      	lsls	r2, r3, #31
 8002024:	d5d1      	bpl.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002026:	f7fe fa99 	bl	800055c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800202e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002032:	079b      	lsls	r3, r3, #30
 8002034:	d4c9      	bmi.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7fe fa91 	bl	800055c <HAL_GetTick>
 800203a:	1b80      	subs	r0, r0, r6
 800203c:	42b8      	cmp	r0, r7
 800203e:	d9f7      	bls.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002040:	e7a5      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002042:	6891      	ldr	r1, [r2, #8]
 8002044:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002048:	e7ce      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 800204a:	bf00      	nop
 800204c:	42470068 	.word	0x42470068
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000
 8002058:	42470e40 	.word	0x42470e40

0800205c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800205c:	2801      	cmp	r0, #1
 800205e:	d120      	bne.n	80020a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002062:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002064:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002068:	d004      	beq.n	8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800206a:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800206c:	480f      	ldr	r0, [pc, #60]	; (80020ac <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800206e:	bf18      	it	ne
 8002070:	2000      	movne	r0, #0
 8002072:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002074:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002076:	490c      	ldr	r1, [pc, #48]	; (80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002078:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800207a:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800207c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002080:	bf4c      	ite	mi
 8002082:	4b0b      	ldrmi	r3, [pc, #44]	; (80020b0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002084:	4b0b      	ldrpl	r3, [pc, #44]	; (80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002086:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800208a:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800208e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002092:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002096:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002098:	f3c0 7002 	ubfx	r0, r0, #28, #3
 800209c:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80020a0:	4770      	bx	lr
          frequency = 0U;
 80020a2:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	00bb8000 	.word	0x00bb8000
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	00f42400 	.word	0x00f42400

080020b8 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b8:	6803      	ldr	r3, [r0, #0]
 80020ba:	68c1      	ldr	r1, [r0, #12]
 80020bc:	691a      	ldr	r2, [r3, #16]
{
 80020be:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 80020c4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c6:	430a      	orrs	r2, r1
 80020c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ca:	6925      	ldr	r5, [r4, #16]
 80020cc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020ce:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020d0:	69c0      	ldr	r0, [r0, #28]
 80020d2:	432a      	orrs	r2, r5
 80020d4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80020d6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020da:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80020dc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020e0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80020e2:	430a      	orrs	r2, r1
 80020e4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	69a1      	ldr	r1, [r4, #24]
 80020ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020ee:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020f0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	4a26      	ldr	r2, [pc, #152]	; (8002190 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020f8:	d129      	bne.n	800214e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <UART_SetConfig+0x4e>
 80020fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002102:	4293      	cmp	r3, r2
 8002104:	d120      	bne.n	8002148 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002106:	f7ff ff01 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800210a:	6862      	ldr	r2, [r4, #4]
 800210c:	2600      	movs	r6, #0
 800210e:	1892      	adds	r2, r2, r2
 8002110:	f04f 0119 	mov.w	r1, #25
 8002114:	eb46 0306 	adc.w	r3, r6, r6
 8002118:	fba0 0101 	umull	r0, r1, r0, r1
 800211c:	f7fe f854 	bl	80001c8 <__aeabi_uldivmod>
 8002120:	2164      	movs	r1, #100	; 0x64
 8002122:	fbb0 f5f1 	udiv	r5, r0, r1
 8002126:	fb01 0315 	mls	r3, r1, r5, r0
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	3332      	adds	r3, #50	; 0x32
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	f003 0207 	and.w	r2, r3, #7
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	6821      	ldr	r1, [r4, #0]
 800213a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800213e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002142:	4413      	add	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002146:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002148:	f7ff fed0 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800214c:	e7dd      	b.n	800210a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800214e:	4293      	cmp	r3, r2
 8002150:	d002      	beq.n	8002158 <UART_SetConfig+0xa0>
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <UART_SetConfig+0xdc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d117      	bne.n	8002188 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002158:	f7ff fed8 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800215c:	6863      	ldr	r3, [r4, #4]
 800215e:	2119      	movs	r1, #25
 8002160:	009a      	lsls	r2, r3, #2
 8002162:	fba0 0101 	umull	r0, r1, r0, r1
 8002166:	0f9b      	lsrs	r3, r3, #30
 8002168:	f7fe f82e 	bl	80001c8 <__aeabi_uldivmod>
 800216c:	2264      	movs	r2, #100	; 0x64
 800216e:	fbb0 f1f2 	udiv	r1, r0, r2
 8002172:	fb02 0311 	mls	r3, r2, r1, r0
 8002176:	6824      	ldr	r4, [r4, #0]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	3332      	adds	r3, #50	; 0x32
 800217c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002180:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002184:	60a3      	str	r3, [r4, #8]
}
 8002186:	e7de      	b.n	8002146 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002188:	f7ff feb0 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800218c:	e7e6      	b.n	800215c <UART_SetConfig+0xa4>
 800218e:	bf00      	nop
 8002190:	40011000 	.word	0x40011000
 8002194:	40011400 	.word	0x40011400

08002198 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219a:	4604      	mov	r4, r0
 800219c:	460e      	mov	r6, r1
 800219e:	4617      	mov	r7, r2
 80021a0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a2:	6821      	ldr	r1, [r4, #0]
 80021a4:	680b      	ldr	r3, [r1, #0]
 80021a6:	ea36 0303 	bics.w	r3, r6, r3
 80021aa:	d101      	bne.n	80021b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80021ac:	2000      	movs	r0, #0
 80021ae:	e014      	b.n	80021da <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80021b0:	1c6b      	adds	r3, r5, #1
 80021b2:	d0f7      	beq.n	80021a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021b4:	b995      	cbnz	r5, 80021dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80021c8:	2320      	movs	r3, #32
 80021ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021d2:	2300      	movs	r3, #0
 80021d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021d8:	2003      	movs	r0, #3
}
 80021da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021dc:	f7fe f9be 	bl	800055c <HAL_GetTick>
 80021e0:	1bc0      	subs	r0, r0, r7
 80021e2:	4285      	cmp	r5, r0
 80021e4:	d2dd      	bcs.n	80021a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80021e6:	e7e6      	b.n	80021b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080021e8 <HAL_UART_Init>:
{
 80021e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80021ea:	4604      	mov	r4, r0
 80021ec:	b340      	cbz	r0, 8002240 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80021ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021f6:	b91b      	cbnz	r3, 8002200 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021fc:	f000 fd08 	bl	8002c10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002200:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002202:	2324      	movs	r3, #36	; 0x24
 8002204:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002208:	68d3      	ldr	r3, [r2, #12]
 800220a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800220e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff ff51 	bl	80020b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800221e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002226:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800222e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002230:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002232:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002234:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002236:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800223a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800223e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002240:	2001      	movs	r0, #1
 8002242:	e7fc      	b.n	800223e <HAL_UART_Init+0x56>

08002244 <HAL_UART_Receive>:
{
 8002244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002248:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800224a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800224e:	2b20      	cmp	r3, #32
{
 8002250:	4604      	mov	r4, r0
 8002252:	460d      	mov	r5, r1
 8002254:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002256:	d155      	bne.n	8002304 <HAL_UART_Receive+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8002258:	2900      	cmp	r1, #0
 800225a:	d051      	beq.n	8002300 <HAL_UART_Receive+0xbc>
 800225c:	2a00      	cmp	r2, #0
 800225e:	d04f      	beq.n	8002300 <HAL_UART_Receive+0xbc>
    __HAL_LOCK(huart);
 8002260:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002264:	2b01      	cmp	r3, #1
 8002266:	d04d      	beq.n	8002304 <HAL_UART_Receive+0xc0>
 8002268:	2301      	movs	r3, #1
 800226a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226e:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002272:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002278:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800227c:	f7fe f96e 	bl	800055c <HAL_GetTick>
    huart->RxXferSize = Size;
 8002280:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8002284:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8002286:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 800228a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 800228e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002290:	b280      	uxth	r0, r0
 8002292:	b918      	cbnz	r0, 800229c <HAL_UART_Receive+0x58>
    huart->RxState = HAL_UART_STATE_READY;
 8002294:	2320      	movs	r3, #32
 8002296:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800229a:	e010      	b.n	80022be <HAL_UART_Receive+0x7a>
      huart->RxXferCount--;
 800229c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022a4:	68a3      	ldr	r3, [r4, #8]
 80022a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022aa:	4632      	mov	r2, r6
 80022ac:	463b      	mov	r3, r7
 80022ae:	f04f 0120 	mov.w	r1, #32
 80022b2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022b4:	d116      	bne.n	80022e4 <HAL_UART_Receive+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022b6:	f7ff ff6f 	bl	8002198 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022ba:	b110      	cbz	r0, 80022c2 <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 80022bc:	2003      	movs	r0, #3
}
 80022be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022c2:	6922      	ldr	r2, [r4, #16]
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	b93a      	cbnz	r2, 80022d8 <HAL_UART_Receive+0x94>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	462b      	mov	r3, r5
 80022cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d0:	f823 2b02 	strh.w	r2, [r3], #2
{
 80022d4:	461d      	mov	r5, r3
 80022d6:	e7da      	b.n	800228e <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	462b      	mov	r3, r5
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f823 2b01 	strh.w	r2, [r3], #1
 80022e2:	e7f7      	b.n	80022d4 <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022e4:	f7ff ff58 	bl	8002198 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1e7      	bne.n	80022bc <HAL_UART_Receive+0x78>
 80022ec:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022ee:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022f0:	6852      	ldr	r2, [r2, #4]
 80022f2:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022f4:	b909      	cbnz	r1, 80022fa <HAL_UART_Receive+0xb6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022f6:	702a      	strb	r2, [r5, #0]
 80022f8:	e7ec      	b.n	80022d4 <HAL_UART_Receive+0x90>
 80022fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022fe:	e7fa      	b.n	80022f6 <HAL_UART_Receive+0xb2>
      return  HAL_ERROR;
 8002300:	2001      	movs	r0, #1
 8002302:	e7dc      	b.n	80022be <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 8002304:	2002      	movs	r0, #2
 8002306:	e7da      	b.n	80022be <HAL_UART_Receive+0x7a>

08002308 <calculateADSR>:
//


#include "adsr.h"
float calculateADSR(ADSR* env){
	switch (env->state) {
 8002308:	7802      	ldrb	r2, [r0, #0]
 800230a:	8843      	ldrh	r3, [r0, #2]
 800230c:	2a02      	cmp	r2, #2
 800230e:	d00d      	beq.n	800232c <calculateADSR+0x24>
 8002310:	2a04      	cmp	r2, #4
 8002312:	d014      	beq.n	800233e <calculateADSR+0x36>
 8002314:	2a01      	cmp	r2, #1
 8002316:	d119      	bne.n	800234c <calculateADSR+0x44>
	        case IDLE:
	            break;
	        case ATTACK:
	        	env->output = env->output + env->attackRate;
 8002318:	7902      	ldrb	r2, [r0, #4]
 800231a:	4413      	add	r3, r2
 800231c:	b29b      	uxth	r3, r3
	            if (env->output >= 0xFF00) {
 800231e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
	        	env->output = env->output + env->attackRate;
 8002322:	8043      	strh	r3, [r0, #2]
	            if (env->output >= 0xFF00) {
 8002324:	d312      	bcc.n	800234c <calculateADSR+0x44>
	            	//env->output = 1.0;
	            	env->state = DECAY;
 8002326:	2302      	movs	r3, #2
	            break;
	        case RELEASE:
	        	env->output = env->output - env->releaseRate;
	            if (env->output <= 0x0100) {
	            	env->output = 0;
	            	env->state = IDLE;
 8002328:	7003      	strb	r3, [r0, #0]
 800232a:	e00f      	b.n	800234c <calculateADSR+0x44>
	        	env->output = env->output - env->decayRate;
 800232c:	7942      	ldrb	r2, [r0, #5]
 800232e:	1a9b      	subs	r3, r3, r2
	            if (env->output <= env->sustainLevel) {
 8002330:	8902      	ldrh	r2, [r0, #8]
	        	env->output = env->output - env->decayRate;
 8002332:	b29b      	uxth	r3, r3
	            if (env->output <= env->sustainLevel) {
 8002334:	429a      	cmp	r2, r3
	        	env->output = env->output - env->decayRate;
 8002336:	8043      	strh	r3, [r0, #2]
	            if (env->output <= env->sustainLevel) {
 8002338:	d308      	bcc.n	800234c <calculateADSR+0x44>
	            	env->state = SUSTAIN;
 800233a:	2303      	movs	r3, #3
 800233c:	e7f4      	b.n	8002328 <calculateADSR+0x20>
	        	env->output = env->output - env->releaseRate;
 800233e:	7982      	ldrb	r2, [r0, #6]
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	b29b      	uxth	r3, r3
	            if (env->output <= 0x0100) {
 8002344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002348:	d90a      	bls.n	8002360 <calculateADSR+0x58>
	        	env->output = env->output - env->releaseRate;
 800234a:	8043      	strh	r3, [r0, #2]
	            }
		}
		return (float)env->output/65280.0;
 800234c:	8843      	ldrh	r3, [r0, #2]
}
 800234e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002368 <calculateADSR+0x60>
		return (float)env->output/65280.0;
 8002352:	ee00 3a10 	vmov	s0, r3
 8002356:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800235a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800235e:	4770      	bx	lr
	            	env->output = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	8043      	strh	r3, [r0, #2]
 8002364:	e7e0      	b.n	8002328 <calculateADSR+0x20>
 8002366:	bf00      	nop
 8002368:	477f0000 	.word	0x477f0000

0800236c <send_codec_ctrl>:
#include "codec.h"

void send_codec_ctrl(uint8_t controlBytes[], uint8_t numBytes)
{
 800236c:	b513      	push	{r0, r1, r4, lr}

	HAL_I2C_Master_Transmit(&hi2c1, 0x94,  controlBytes, numBytes, HAL_MAX_DELAY);
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <send_codec_ctrl+0x24>)

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800237a:	4c05      	ldr	r4, [pc, #20]	; (8002390 <send_codec_ctrl+0x24>)
	HAL_I2C_Master_Transmit(&hi2c1, 0x94,  controlBytes, numBytes, HAL_MAX_DELAY);
 800237c:	2194      	movs	r1, #148	; 0x94
 800237e:	f7fe fd7b 	bl	8000e78 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8002382:	4620      	mov	r0, r4
 8002384:	f7fe ffc0 	bl	8001308 <HAL_I2C_GetState>
 8002388:	2820      	cmp	r0, #32
 800238a:	d1fa      	bne.n	8002382 <send_codec_ctrl+0x16>


}
 800238c:	b002      	add	sp, #8
 800238e:	bd10      	pop	{r4, pc}
 8002390:	2000002c 	.word	0x2000002c

08002394 <read_codec_register>:

uint8_t read_codec_register(uint8_t mapbyte)
{
 8002394:	b510      	push	{r4, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	aa06      	add	r2, sp, #24
	uint8_t receivedByte;
	HAL_I2C_Master_Transmit(&hi2c1, 0x94,  &mapbyte, 1, HAL_MAX_DELAY);
 800239a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
{
 800239e:	f802 0d09 	strb.w	r0, [r2, #-9]!
	HAL_I2C_Master_Transmit(&hi2c1, 0x94,  &mapbyte, 1, HAL_MAX_DELAY);
 80023a2:	2301      	movs	r3, #1
 80023a4:	9400      	str	r4, [sp, #0]
 80023a6:	2194      	movs	r1, #148	; 0x94
 80023a8:	480a      	ldr	r0, [pc, #40]	; (80023d4 <read_codec_register+0x40>)
 80023aa:	f7fe fd65 	bl	8000e78 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x94, (uint8_t*)&receivedByte, 1, HAL_MAX_DELAY);
 80023ae:	9400      	str	r4, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	f10d 0217 	add.w	r2, sp, #23
 80023b6:	2194      	movs	r1, #148	; 0x94
 80023b8:	4806      	ldr	r0, [pc, #24]	; (80023d4 <read_codec_register+0x40>)
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80023ba:	4c06      	ldr	r4, [pc, #24]	; (80023d4 <read_codec_register+0x40>)
	HAL_I2C_Master_Receive(&hi2c1, 0x94, (uint8_t*)&receivedByte, 1, HAL_MAX_DELAY);
 80023bc:	f7fe fe30 	bl	8001020 <HAL_I2C_Master_Receive>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7fe ffa1 	bl	8001308 <HAL_I2C_GetState>
 80023c6:	2820      	cmp	r0, #32
 80023c8:	d1fa      	bne.n	80023c0 <read_codec_register+0x2c>

	return receivedByte;
}
 80023ca:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80023ce:	b006      	add	sp, #24
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	bf00      	nop
 80023d4:	2000002c 	.word	0x2000002c

080023d8 <codec_ctrl_init>:



void codec_ctrl_init()
{
 80023d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t delaycount;
	uint8_t CodecCommandBuffer[5];

	uint8_t regValue = 0xFF;

	HAL_GPIO_WritePin(GPIOD, 0x10, GPIO_PIN_SET);
 80023da:	2201      	movs	r2, #1
	while (delaycount > 0)
	{
		delaycount--;
	}
	//keep codec OFF
	CodecCommandBuffer[0] = 0x0D; // Playback Ctl 1
 80023dc:	ac02      	add	r4, sp, #8
	HAL_GPIO_WritePin(GPIOD, 0x10, GPIO_PIN_SET);
 80023de:	2110      	movs	r1, #16
 80023e0:	4847      	ldr	r0, [pc, #284]	; (8002500 <codec_ctrl_init+0x128>)
 80023e2:	f7fe fb97 	bl	8000b14 <HAL_GPIO_WritePin>
	CodecCommandBuffer[0] = 0x0D; // Playback Ctl 1
 80023e6:	f240 130d 	movw	r3, #269	; 0x10d
 80023ea:	f824 3d08 	strh.w	r3, [r4, #-8]!
	CodecCommandBuffer[1] = 0x01; // master mute on
	send_codec_ctrl(CodecCommandBuffer, 2);
 80023ee:	2102      	movs	r1, #2
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff ffbb 	bl	800236c <send_codec_ctrl>

	//begin initialization sequence (p. 32) of datasheet for CS43L22
	CodecCommandBuffer[0] = 0x00;
 80023f6:	f44f 4319 	mov.w	r3, #39168	; 0x9900
	CodecCommandBuffer[1] = 0x99;
	send_codec_ctrl(CodecCommandBuffer, 2);
 80023fa:	4620      	mov	r0, r4
 80023fc:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x00;
 80023fe:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002402:	f7ff ffb3 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x47;
 8002406:	f248 0347 	movw	r3, #32839	; 0x8047
	CodecCommandBuffer[1] = 0x80;
	send_codec_ctrl(CodecCommandBuffer, 2);
 800240a:	2102      	movs	r1, #2
 800240c:	4620      	mov	r0, r4
	CodecCommandBuffer[0] = 0x47;
 800240e:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002412:	f7ff ffab 	bl	800236c <send_codec_ctrl>

	regValue = read_codec_register(0x32);
 8002416:	2032      	movs	r0, #50	; 0x32
 8002418:	f7ff ffbc 	bl	8002394 <read_codec_register>

	CodecCommandBuffer[0] = 0x32;
	CodecCommandBuffer[1] = regValue | 0x80;
 800241c:	f060 007f 	orn	r0, r0, #127	; 0x7f
	CodecCommandBuffer[0] = 0x32;
 8002420:	2532      	movs	r5, #50	; 0x32
	CodecCommandBuffer[1] = regValue | 0x80;
 8002422:	f88d 0001 	strb.w	r0, [sp, #1]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002426:	2102      	movs	r1, #2
 8002428:	4620      	mov	r0, r4
	CodecCommandBuffer[0] = 0x32;
 800242a:	f88d 5000 	strb.w	r5, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 800242e:	f7ff ff9d 	bl	800236c <send_codec_ctrl>

	regValue = read_codec_register(0x32);
 8002432:	4628      	mov	r0, r5
 8002434:	f7ff ffae 	bl	8002394 <read_codec_register>

	CodecCommandBuffer[0] = 0x32;
	CodecCommandBuffer[1] = regValue & (~0x80);
 8002438:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800243c:	f88d 0001 	strb.w	r0, [sp, #1]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002440:	2102      	movs	r1, #2
 8002442:	4620      	mov	r0, r4
	CodecCommandBuffer[0] = 0x32;
 8002444:	f88d 5000 	strb.w	r5, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002448:	f7ff ff90 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x00;
 800244c:	2300      	movs	r3, #0
	CodecCommandBuffer[1] = 0x00;
	send_codec_ctrl(CodecCommandBuffer, 2);
 800244e:	4620      	mov	r0, r4
 8002450:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x00;
 8002452:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002456:	f7ff ff89 	bl	800236c <send_codec_ctrl>
	//end of initialization sequence

	CodecCommandBuffer[0] = 0x04; // Power CTL 2
 800245a:	f64a 7304 	movw	r3, #44804	; 0xaf04
	CodecCommandBuffer[1] = 0xAF; // all power on
	send_codec_ctrl(CodecCommandBuffer, 2);
 800245e:	4620      	mov	r0, r4
 8002460:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x04; // Power CTL 2
 8002462:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002466:	f7ff ff81 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x0D; // playback control 1
 800246a:	f247 030d 	movw	r3, #28685	; 0x700d
	CodecCommandBuffer[1] = 0x70; // max gain mute off
	send_codec_ctrl(CodecCommandBuffer, 2);
 800246e:	4620      	mov	r0, r4
 8002470:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x0D; // playback control 1
 8002472:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002476:	f7ff ff79 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x05; // clocking control
 800247a:	f248 1305 	movw	r3, #33029	; 0x8105
	CodecCommandBuffer[1] = 0x81; //auto detect clock
	send_codec_ctrl(CodecCommandBuffer, 2);
 800247e:	4620      	mov	r0, r4
 8002480:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x05; // clocking control
 8002482:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002486:	f7ff ff71 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x06; // interface control 1
 800248a:	f240 7306 	movw	r3, #1798	; 0x706
	CodecCommandBuffer[1] = 0x07; // I²S, up to 24-bit data, 16-bit data
	send_codec_ctrl(CodecCommandBuffer, 2);
 800248e:	4620      	mov	r0, r4
 8002490:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x06; // interface control 1
 8002492:	f8ad 3000 	strh.w	r3, [sp]

	CodecCommandBuffer[0] = 0x0A; //Analog ZC and SR Settings
 8002496:	250a      	movs	r5, #10
	send_codec_ctrl(CodecCommandBuffer, 2);
 8002498:	f7ff ff68 	bl	800236c <send_codec_ctrl>
	CodecCommandBuffer[1] = 0x00; // no zero cross or soft ramping
	send_codec_ctrl(CodecCommandBuffer, 2);
 800249c:	4620      	mov	r0, r4
 800249e:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x0A; //Analog ZC and SR Settings
 80024a0:	f8ad 5000 	strh.w	r5, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024a4:	f7ff ff62 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x27; // Limiter Control 1, Min/Max Thresholds
 80024a8:	2327      	movs	r3, #39	; 0x27
	CodecCommandBuffer[1] = 0x00; // limiter completely disabled
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024aa:	4620      	mov	r0, r4
 80024ac:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x27; // Limiter Control 1, Min/Max Thresholds
 80024ae:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024b2:	f7ff ff5b 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x1A | 0x80; //  PCMVolume
 80024b6:	f640 239a 	movw	r3, #2714	; 0xa9a
	CodecCommandBuffer[1] = 0x0A;
	CodecCommandBuffer[2] = 0x0A;
	send_codec_ctrl(CodecCommandBuffer, 3);
 80024ba:	4620      	mov	r0, r4
 80024bc:	2103      	movs	r1, #3
	CodecCommandBuffer[0] = 0x1A | 0x80; //  PCMVolume
 80024be:	f8ad 3000 	strh.w	r3, [sp]
	CodecCommandBuffer[1] = 0x0A;
 80024c2:	f88d 5002 	strb.w	r5, [sp, #2]
	send_codec_ctrl(CodecCommandBuffer, 3);
 80024c6:	f7ff ff51 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x1F;	//  Tone Control
 80024ca:	f640 731f 	movw	r3, #3871	; 0xf1f
	CodecCommandBuffer[1] = 0x0F; // default values no EQ
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024ce:	4620      	mov	r0, r4
 80024d0:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x1F;	//  Tone Control
 80024d2:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024d6:	f7ff ff49 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x22;   // master volume
 80024da:	f64d 0322 	movw	r3, #55330	; 0xd822
	CodecCommandBuffer[1] = 0xD8; // 0x00-full, 0x01-mute 0x01-0xFE -95db - -0db
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024de:	4620      	mov	r0, r4
 80024e0:	2102      	movs	r1, #2
	CodecCommandBuffer[0] = 0x22;   // master volume
 80024e2:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024e6:	f7ff ff41 	bl	800236c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x02; // power control
 80024ea:	f649 6302 	movw	r3, #40450	; 0x9e02
	CodecCommandBuffer[1] = 0x9E; // power up
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024ee:	2102      	movs	r1, #2
 80024f0:	4620      	mov	r0, r4
	CodecCommandBuffer[0] = 0x02; // power control
 80024f2:	f8ad 3000 	strh.w	r3, [sp]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80024f6:	f7ff ff39 	bl	800236c <send_codec_ctrl>

	return;

}
 80024fa:	b003      	add	sp, #12
 80024fc:	bd30      	pop	{r4, r5, pc}
 80024fe:	bf00      	nop
 8002500:	40020c00 	.word	0x40020c00

08002504 <calculateVoices>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
uint16_t calculateVoices(void){
 8002504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t out = 0;

	for(int i = 0; i<numVoices; i++) {
		voices[i] = updateOsc(voices[i], SINE, 0, 0);
 8002508:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8002558 <calculateVoices+0x54>
uint16_t calculateVoices(void){
 800250c:	b089      	sub	sp, #36	; 0x24
	for(int i = 0; i<numVoices; i++) {
 800250e:	2700      	movs	r7, #0
		voices[i] = updateOsc(voices[i], SINE, 0, 0);
 8002510:	ae04      	add	r6, sp, #16
 8002512:	46c1      	mov	r9, r8
 8002514:	2400      	movs	r4, #0
 8002516:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800251a:	eb08 1507 	add.w	r5, r8, r7, lsl #4
 800251e:	9401      	str	r4, [sp, #4]
 8002520:	68eb      	ldr	r3, [r5, #12]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002528:	4630      	mov	r0, r6
 800252a:	f000 fa45 	bl	80029b8 <updateOsc>
 800252e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
	for(int i = 0; i<numVoices; i++) {
 8002532:	3701      	adds	r7, #1
 8002534:	2f08      	cmp	r7, #8
		voices[i] = updateOsc(voices[i], SINE, 0, 0);
 8002536:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for(int i = 0; i<numVoices; i++) {
 800253a:	d1eb      	bne.n	8002514 <calculateVoices+0x10>
 800253c:	4623      	mov	r3, r4
	uint32_t out = 0;
 800253e:	4620      	mov	r0, r4
	}

	for(int i = 0; i<numVoices; i++) {
		out = out + voices[i].amp;
 8002540:	eb09 0203 	add.w	r2, r9, r3
 8002544:	3310      	adds	r3, #16
 8002546:	8892      	ldrh	r2, [r2, #4]
	for(int i = 0; i<numVoices; i++) {
 8002548:	2b80      	cmp	r3, #128	; 0x80
		out = out + voices[i].amp;
 800254a:	4410      	add	r0, r2
	for(int i = 0; i<numVoices; i++) {
 800254c:	d1f8      	bne.n	8002540 <calculateVoices+0x3c>
	}

	out = out >> 4;

	return out;
}
 800254e:	f3c0 100f 	ubfx	r0, r0, #4, #16
 8002552:	b009      	add	sp, #36	; 0x24
 8002554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002558:	200000e0 	.word	0x200000e0

0800255c <HAL_I2SEx_TxRxHalfCpltCallback>:

	return out;
}


void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 800255c:	b508      	push	{r3, lr}
	out = calculateVoices();
 800255e:	f7ff ffd1 	bl	8002504 <calculateVoices>
	uint16_t out;

	out = calculateSample();
	//restore to buffer left and right
	txBuf[0] = out;
 8002562:	4b02      	ldr	r3, [pc, #8]	; (800256c <HAL_I2SEx_TxRxHalfCpltCallback+0x10>)
 8002564:	8018      	strh	r0, [r3, #0]
	txBuf[1] = out;
 8002566:	8058      	strh	r0, [r3, #2]
}
 8002568:	bd08      	pop	{r3, pc}
 800256a:	bf00      	nop
 800256c:	20000238 	.word	0x20000238

08002570 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8002570:	b508      	push	{r3, lr}
	out = calculateVoices();
 8002572:	f7ff ffc7 	bl	8002504 <calculateVoices>
	uint16_t out;

	out = calculateSample();
	//restore to buffer
	txBuf[2] = out;
 8002576:	4b02      	ldr	r3, [pc, #8]	; (8002580 <HAL_I2SEx_TxRxCpltCallback+0x10>)
 8002578:	8098      	strh	r0, [r3, #4]
	txBuf[3] = out;
 800257a:	80d8      	strh	r0, [r3, #6]
}
 800257c:	bd08      	pop	{r3, pc}
 800257e:	bf00      	nop
 8002580:	20000238 	.word	0x20000238

08002584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	2414      	movs	r4, #20
{
 8002588:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258a:	4622      	mov	r2, r4
 800258c:	2100      	movs	r1, #0
 800258e:	a80d      	add	r0, sp, #52	; 0x34
 8002590:	f000 fbe2 	bl	8002d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002594:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002596:	4622      	mov	r2, r4
 8002598:	2100      	movs	r1, #0
 800259a:	a807      	add	r0, sp, #28
 800259c:	f000 fbdc 	bl	8002d58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a0:	4632      	mov	r2, r6
 80025a2:	2100      	movs	r1, #0
 80025a4:	a803      	add	r0, sp, #12
 80025a6:	f000 fbd7 	bl	8002d58 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	2400      	movs	r4, #0
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <SystemClock_Config+0xa8>)
 80025ae:	9401      	str	r4, [sp, #4]
 80025b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <SystemClock_Config+0xac>)
 80025c4:	9402      	str	r4, [sp, #8]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d4:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025d6:	2208      	movs	r2, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025d8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025da:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025dc:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025de:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e2:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025e4:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e6:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025e8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025ea:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025ec:	e9cd 760f 	strd	r7, r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025f0:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025f4:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	f7ff fa0b 	bl	8001a10 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fa:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fc:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002600:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002608:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800260c:	a807      	add	r0, sp, #28
 800260e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002610:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002612:	f7ff fbd1 	bl	8001db8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8002616:	2304      	movs	r3, #4
 8002618:	2060      	movs	r0, #96	; 0x60
 800261a:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261e:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002620:	9703      	str	r7, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002622:	f7ff fc83 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002626:	b019      	add	sp, #100	; 0x64
 8002628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000

08002634 <main>:
{
 8002634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002638:	b08d      	sub	sp, #52	; 0x34
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800263a:	2400      	movs	r4, #0
 800263c:	4d95      	ldr	r5, [pc, #596]	; (8002894 <main+0x260>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800263e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80028d8 <main+0x2a4>
  HAL_Init();
 8002642:	f7fd ff65 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 8002646:	f7ff ff9d 	bl	8002584 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	2214      	movs	r2, #20
 800264c:	2100      	movs	r1, #0
 800264e:	a807      	add	r0, sp, #28
 8002650:	f000 fb82 	bl	8002d58 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002654:	9401      	str	r4, [sp, #4]
 8002656:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002658:	488f      	ldr	r0, [pc, #572]	; (8002898 <main+0x264>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	632b      	str	r3, [r5, #48]	; 0x30
 8002660:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	9402      	str	r4, [sp, #8]
 800266c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	632b      	str	r3, [r5, #48]	; 0x30
 8002674:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	9302      	str	r3, [sp, #8]
 800267c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267e:	9403      	str	r4, [sp, #12]
 8002680:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002686:	632b      	str	r3, [r5, #48]	; 0x30
 8002688:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	9303      	str	r3, [sp, #12]
 8002690:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	9404      	str	r4, [sp, #16]
 8002694:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	632b      	str	r3, [r5, #48]	; 0x30
 800269c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	9304      	str	r3, [sp, #16]
 80026a4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	9405      	str	r4, [sp, #20]
 80026a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	632b      	str	r3, [r5, #48]	; 0x30
 80026b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	9305      	str	r3, [sp, #20]
 80026b8:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	9406      	str	r4, [sp, #24]
 80026bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	632b      	str	r3, [r5, #48]	; 0x30
 80026c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80026cc:	4622      	mov	r2, r4
 80026ce:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80026d2:	f7fe fa1f 	bl	8000b14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80026d6:	2201      	movs	r2, #1
 80026d8:	4611      	mov	r1, r2
 80026da:	4870      	ldr	r0, [pc, #448]	; (800289c <main+0x268>)
 80026dc:	f7fe fa1a 	bl	8000b14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80026e0:	4622      	mov	r2, r4
 80026e2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80026e6:	486e      	ldr	r0, [pc, #440]	; (80028a0 <main+0x26c>)
 80026e8:	f7fe fa14 	bl	8000b14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2701      	movs	r7, #1
 80026ee:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80026f0:	a907      	add	r1, sp, #28
 80026f2:	4869      	ldr	r0, [pc, #420]	; (8002898 <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f4:	e9cd 6707 	strd	r6, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f7fe f92a 	bl	8000954 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002700:	a907      	add	r1, sp, #28
 8002702:	4866      	ldr	r0, [pc, #408]	; (800289c <main+0x268>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002704:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	e9cd 7707 	strd	r7, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002710:	f7fe f920 	bl	8000954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002714:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002716:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800271a:	4860      	ldr	r0, [pc, #384]	; (800289c <main+0x268>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	e9cd 6408 	strd	r6, r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002722:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002726:	f7fe f915 	bl	8000954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800272a:	a907      	add	r1, sp, #28
 800272c:	485d      	ldr	r0, [pc, #372]	; (80028a4 <main+0x270>)
  GPIO_InitStruct.Pin = B1_Pin;
 800272e:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	e9cd 9408 	strd	r9, r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002734:	f7fe f90e 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002738:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	a907      	add	r1, sp, #28
 800273c:	4859      	ldr	r0, [pc, #356]	; (80028a4 <main+0x270>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800273e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f7fe f903 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800274e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002750:	a907      	add	r1, sp, #28
 8002752:	4855      	ldr	r0, [pc, #340]	; (80028a8 <main+0x274>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002756:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800275a:	f7fe f8fb 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800275e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002762:	a907      	add	r1, sp, #28
 8002764:	4850      	ldr	r0, [pc, #320]	; (80028a8 <main+0x274>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002766:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002772:	f7fe f8ef 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002776:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277a:	a907      	add	r1, sp, #28
 800277c:	4848      	ldr	r0, [pc, #288]	; (80028a0 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002786:	f44f 7700 	mov.w	r7, #512	; 0x200
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278a:	f7fe f8e3 	bl	8000954 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800278e:	a907      	add	r1, sp, #28
 8002790:	4844      	ldr	r0, [pc, #272]	; (80028a4 <main+0x270>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002794:	e9cd 7407 	strd	r7, r4, [sp, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002798:	f7fe f8dc 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800279c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027a6:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	483e      	ldr	r0, [pc, #248]	; (80028a4 <main+0x270>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027aa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f7fe f8d0 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80027b4:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027b6:	a907      	add	r1, sp, #28
 80027b8:	4839      	ldr	r0, [pc, #228]	; (80028a0 <main+0x26c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027bc:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027c0:	f7fe f8c8 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80027c4:	a907      	add	r1, sp, #28
 80027c6:	4834      	ldr	r0, [pc, #208]	; (8002898 <main+0x264>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027ca:	e9cd 6907 	strd	r6, r9, [sp, #28]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f7fe f8c1 	bl	8000954 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027d2:	9407      	str	r4, [sp, #28]
 80027d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027da:	632b      	str	r3, [r5, #48]	; 0x30
 80027dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2s3.Instance = SPI3;
 80027de:	4d33      	ldr	r5, [pc, #204]	; (80028ac <main+0x278>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027e4:	4621      	mov	r1, r4
 80027e6:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e8:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ea:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ec:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ee:	f7fd fecd 	bl	800058c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027f2:	2010      	movs	r0, #16
 80027f4:	f7fd fefe 	bl	80005f4 <HAL_NVIC_EnableIRQ>
  hi2s3.Instance = SPI3;
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <main+0x27c>)
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80027fa:	612f      	str	r7, [r5, #16]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80027fc:	e9c5 3700 	strd	r3, r7, [r5]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002800:	4628      	mov	r0, r5
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002802:	f64b 3380 	movw	r3, #48000	; 0xbb80
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002806:	e9c5 3405 	strd	r3, r4, [r5, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800280a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800280e:	e9c5 4407 	strd	r4, r4, [r5, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002812:	f7fe fd7d 	bl	8001310 <HAL_I2S_Init>
  hi2c1.Instance = I2C1;
 8002816:	4827      	ldr	r0, [pc, #156]	; (80028b4 <main+0x280>)
  hi2c1.Init.ClockSpeed = 100000;
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <main+0x284>)
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <main+0x288>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800281c:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 800281e:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002822:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002826:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800282a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002832:	f7fe fa75 	bl	8000d20 <HAL_I2C_Init>
  huart2.Instance = USART2;
 8002836:	4822      	ldr	r0, [pc, #136]	; (80028c0 <main+0x28c>)
  huart2.Init.BaudRate = 31250;
 8002838:	4922      	ldr	r1, [pc, #136]	; (80028c4 <main+0x290>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800283a:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 31250;
 800283c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002840:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002844:	230c      	movs	r3, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002846:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800284a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800284e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002850:	f7ff fcca 	bl	80021e8 <HAL_UART_Init>
  codec_ctrl_init();
 8002854:	f7ff fdc0 	bl	80023d8 <codec_ctrl_init>
  HAL_I2SEx_TransmitReceive_DMA (&hi2s3, txBuf, rxBuf, 2);
 8002858:	4633      	mov	r3, r6
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <main+0x294>)
 800285c:	491b      	ldr	r1, [pc, #108]	; (80028cc <main+0x298>)
	  voices[i].env = &envelopes[i];
 800285e:	4f1c      	ldr	r7, [pc, #112]	; (80028d0 <main+0x29c>)
  HAL_I2SEx_TransmitReceive_DMA (&hi2s3, txBuf, rxBuf, 2);
 8002860:	4628      	mov	r0, r5
 8002862:	f7fe fe8d 	bl	8001580 <HAL_I2SEx_TransmitReceive_DMA>
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <main+0x2a0>)
	  voices[i].env->state = IDLE;
 8002868:	4621      	mov	r1, r4
	  voices[i].env->sustainLevel = 0xFEEE;
 800286a:	f64f 65ee 	movw	r5, #65262	; 0xfeee
	  voices[i].env->decayRate  = 0xF;
 800286e:	220f      	movs	r2, #15
	  voices[i].env->attackRate = 0xFA;
 8002870:	20fa      	movs	r0, #250	; 0xfa
	  voices[i].env = &envelopes[i];
 8002872:	eb07 1604 	add.w	r6, r7, r4, lsl #4
  for(int i = 0; i<numVoices; i++) {
 8002876:	3401      	adds	r4, #1
 8002878:	2c08      	cmp	r4, #8
	  voices[i].env = &envelopes[i];
 800287a:	60f3      	str	r3, [r6, #12]
	  voices[i].env->state = IDLE;
 800287c:	7019      	strb	r1, [r3, #0]
	  voices[i].env->output = 0x0000;
 800287e:	8059      	strh	r1, [r3, #2]
	  voices[i].env->sustainLevel = 0xFEEE;
 8002880:	811d      	strh	r5, [r3, #8]
	  voices[i].env->decayRate  = 0xF;
 8002882:	715a      	strb	r2, [r3, #5]
	  voices[i].env->attackRate = 0xFA;
 8002884:	7118      	strb	r0, [r3, #4]
	  voices[i].env->releaseRate = 0xF;
 8002886:	719a      	strb	r2, [r3, #6]
 8002888:	f103 030a 	add.w	r3, r3, #10
  for(int i = 0; i<numVoices; i++) {
 800288c:	d1f1      	bne.n	8002872 <main+0x23e>
	  getMIDI();
 800288e:	f000 f875 	bl	800297c <getMIDI>
 8002892:	e7fc      	b.n	800288e <main+0x25a>
 8002894:	40023800 	.word	0x40023800
 8002898:	40021000 	.word	0x40021000
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	200001f0 	.word	0x200001f0
 80028b0:	40003c00 	.word	0x40003c00
 80028b4:	2000002c 	.word	0x2000002c
 80028b8:	40005400 	.word	0x40005400
 80028bc:	000186a0 	.word	0x000186a0
 80028c0:	20000160 	.word	0x20000160
 80028c4:	40004400 	.word	0x40004400
 80028c8:	20000242 	.word	0x20000242
 80028cc:	20000238 	.word	0x20000238
 80028d0:	200000e0 	.word	0x200000e0
 80028d4:	200001a0 	.word	0x200001a0
 80028d8:	10120000 	.word	0x10120000

080028dc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028dc:	4770      	bx	lr
	...

080028e0 <readUserInput>:
#include "midi.h"

// get MIDI input from UART
uint8_t readUserInput(void) {
 80028e0:	b507      	push	{r0, r1, r2, lr}
	uint8_t readBuf[1];
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e6:	2201      	movs	r2, #1
 80028e8:	a901      	add	r1, sp, #4
 80028ea:	4804      	ldr	r0, [pc, #16]	; (80028fc <readUserInput+0x1c>)
 80028ec:	f7ff fcaa 	bl	8002244 <HAL_UART_Receive>
	return *readBuf;
}
 80028f0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80028f4:	b003      	add	sp, #12
 80028f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fa:	bf00      	nop
 80028fc:	20000160 	.word	0x20000160

08002900 <noteOff>:

void noteOff(uint8_t note){
 8002900:	b510      	push	{r4, lr}

	for(int i = 0; i<numVoices; i++) {
		  if(note == voices[i].note){
 8002902:	4907      	ldr	r1, [pc, #28]	; (8002920 <noteOff+0x20>)
	for(int i = 0; i<numVoices; i++) {
 8002904:	2300      	movs	r3, #0
		  if(note == voices[i].note){
 8002906:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 800290a:	7994      	ldrb	r4, [r2, #6]
 800290c:	4284      	cmp	r4, r0
 800290e:	d103      	bne.n	8002918 <noteOff+0x18>
			  voices[i].env->state = RELEASE;
 8002910:	68d3      	ldr	r3, [r2, #12]
 8002912:	2204      	movs	r2, #4
 8002914:	701a      	strb	r2, [r3, #0]
			  return;
		 }
	  }
	// should never get here
	return;
}
 8002916:	bd10      	pop	{r4, pc}
	for(int i = 0; i<numVoices; i++) {
 8002918:	3301      	adds	r3, #1
 800291a:	2b08      	cmp	r3, #8
 800291c:	d1f3      	bne.n	8002906 <noteOff+0x6>
 800291e:	e7fa      	b.n	8002916 <noteOff+0x16>
 8002920:	200000e0 	.word	0x200000e0

08002924 <noteOn>:

void noteOn(uint8_t note, uint8_t vel){

	for(int i = 0; i<numVoices; i++) {
		if(voices[i].note == 0){
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <noteOn+0x50>)
void noteOn(uint8_t note, uint8_t vel){
 8002926:	b530      	push	{r4, r5, lr}
	for(int i = 0; i<numVoices; i++) {
 8002928:	2400      	movs	r4, #0
		if(voices[i].note == 0){
 800292a:	eb03 1204 	add.w	r2, r3, r4, lsl #4
 800292e:	7995      	ldrb	r5, [r2, #6]
 8002930:	b96d      	cbnz	r5, 800294e <noteOn+0x2a>
			voices[i].note=note;
			voices[i].amp_scaler = ((float)velocity_LUT[vel])/128;
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <noteOn+0x54>)
			voices[i].note=note;
 8002934:	7190      	strb	r0, [r2, #6]
			voices[i].amp_scaler = ((float)velocity_LUT[vel])/128;
 8002936:	5c5b      	ldrb	r3, [r3, r1]
			voices[i].pos = 0;
 8002938:	8055      	strh	r5, [r2, #2]
			voices[i].amp_scaler = ((float)velocity_LUT[vel])/128;
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eefb 7aec 	vcvt.f32.u32	s15, s15, #7
			voices[i].env->state = ATTACK;
 8002942:	68d3      	ldr	r3, [r2, #12]
			voices[i].amp_scaler = ((float)velocity_LUT[vel])/128;
 8002944:	edc2 7a02 	vstr	s15, [r2, #8]
		}
	}
	voices[numVoices-1].note=note;
	voices[numVoices-1].amp_scaler = ((float)velocity_LUT[vel])/128;
	voices[numVoices-1].pos = 0;
	voices[numVoices-1].env->state = ATTACK;
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]

	return;
}
 800294c:	bd30      	pop	{r4, r5, pc}
	for(int i = 0; i<numVoices; i++) {
 800294e:	3401      	adds	r4, #1
 8002950:	2c08      	cmp	r4, #8
 8002952:	d1ea      	bne.n	800292a <noteOn+0x6>
	voices[numVoices-1].amp_scaler = ((float)velocity_LUT[vel])/128;
 8002954:	4a08      	ldr	r2, [pc, #32]	; (8002978 <noteOn+0x54>)
	voices[numVoices-1].note=note;
 8002956:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
	voices[numVoices-1].amp_scaler = ((float)velocity_LUT[vel])/128;
 800295a:	5c52      	ldrb	r2, [r2, r1]
 800295c:	ee07 2a90 	vmov	s15, r2
 8002960:	eefb 7aec 	vcvt.f32.u32	s15, s15, #7
	voices[numVoices-1].pos = 0;
 8002964:	2200      	movs	r2, #0
	voices[numVoices-1].amp_scaler = ((float)velocity_LUT[vel])/128;
 8002966:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	voices[numVoices-1].pos = 0;
 800296a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	voices[numVoices-1].env->state = ATTACK;
 800296e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002970:	e7ea      	b.n	8002948 <noteOn+0x24>
 8002972:	bf00      	nop
 8002974:	200000e0 	.word	0x200000e0
 8002978:	08002d88 	.word	0x08002d88

0800297c <getMIDI>:

void getMIDI(void){
 800297c:	b510      	push	{r4, lr}
	uint8_t status, note, vel;

	status = readUserInput();
 800297e:	f7ff ffaf 	bl	80028e0 <readUserInput>
 8002982:	f000 00f0 	and.w	r0, r0, #240	; 0xf0

	  if ((status&0b11110000) == 0b10000000){
 8002986:	2880      	cmp	r0, #128	; 0x80
 8002988:	d105      	bne.n	8002996 <getMIDI+0x1a>
		  note = readUserInput();
 800298a:	f7ff ffa9 	bl	80028e0 <readUserInput>
		else{
			noteOn(note,vel);
		}

	  }
}
 800298e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			noteOff(note);
 8002992:	f7ff bfb5 	b.w	8002900 <noteOff>
	  else if ((status&0b11110000) == 0b10010000){
 8002996:	2890      	cmp	r0, #144	; 0x90
 8002998:	d10c      	bne.n	80029b4 <getMIDI+0x38>
		note = readUserInput();
 800299a:	f7ff ffa1 	bl	80028e0 <readUserInput>
 800299e:	4604      	mov	r4, r0
		vel = readUserInput();
 80029a0:	f7ff ff9e 	bl	80028e0 <readUserInput>
		if(vel == 0){
 80029a4:	4601      	mov	r1, r0
			noteOff(note);
 80029a6:	4620      	mov	r0, r4
		if(vel == 0){
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d0f0      	beq.n	800298e <getMIDI+0x12>
}
 80029ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			noteOn(note,vel);
 80029b0:	f7ff bfb8 	b.w	8002924 <noteOn>
}
 80029b4:	bd10      	pop	{r4, pc}
	...

080029b8 <updateOsc>:
 */
#include "oscillator.h"

float dutyCycle = 0.5; //square wave osc duty cycle

osc updateOsc(osc o, unsigned char wave, uint16_t pitchMod, uint16_t ampMod){
 80029b8:	b084      	sub	sp, #16
 80029ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029be:	ad09      	add	r5, sp, #36	; 0x24
 80029c0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80029c4:	4606      	mov	r6, r0
 80029c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80029c8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    if(o.env->state != IDLE){
 80029cc:	f890 8000 	ldrb.w	r8, [r0]
 80029d0:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
 80029d4:	f1b8 0f00 	cmp.w	r8, #0
 80029d8:	d045      	beq.n	8002a66 <updateOsc+0xae>
	//if(o.note){
		o.jump = (MIDI_LUT[o.note]);
 80029da:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <updateOsc+0xb4>)
 80029dc:	f89d 802a 	ldrb.w	r8, [sp, #42]	; 0x2a
 80029e0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 80029e4:	f832 9018 	ldrh.w	r9, [r2, r8, lsl #1]

        o.pos = o.pos + o.jump + pitchMod;
 80029e8:	eb09 0207 	add.w	r2, r9, r7
 80029ec:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 80029f0:	4417      	add	r7, r2
 80029f2:	b2bf      	uxth	r7, r7
        //o.amp = (sin_LUT[(o.pos>>4)]);// sin wave

        if (wave == 0){
 80029f4:	bb43      	cbnz	r3, 8002a48 <updateOsc+0x90>
            o.amp = (sin_LUT[(o.pos>>2)]);// sin wave
 80029f6:	08ba      	lsrs	r2, r7, #2
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <updateOsc+0xb8>)
 80029fa:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
        }
        else if (wave == 2){
            o.amp = (o.pos); // sawtooth wave
        }

        float ADSRscaler  = calculateADSR(o.env);
 80029fe:	f7ff fc83 	bl	8002308 <calculateADSR>
        o.amp = (int)(((o.amp + ampMod)*o.amp_scaler)*ADSRscaler);
 8002a02:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002a06:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8002a0a:	18e3      	adds	r3, r4, r3
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002a1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002a20:	ee10 3a10 	vmov	r3, s0
 8002a24:	b29b      	uxth	r3, r3
    	o.amp = 0x00;
		o.jump = 0;
		o.note = 0;
    }

    return o;
 8002a26:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8002a2a:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 8002a2e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8002a32:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 8002a36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a3a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
}
 8002a3e:	4630      	mov	r0, r6
 8002a40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a44:	b004      	add	sp, #16
 8002a46:	4770      	bx	lr
        else if (wave == 1){
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d108      	bne.n	8002a5e <updateOsc+0xa6>
            o.amp = 0xFFFF*((o.pos)>=(32767)); // square wave
 8002a4c:	f647 74fe 	movw	r4, #32766	; 0x7ffe
 8002a50:	42a7      	cmp	r7, r4
 8002a52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a56:	bf98      	it	ls
 8002a58:	2400      	movls	r4, #0
 8002a5a:	b2a4      	uxth	r4, r4
 8002a5c:	e7cf      	b.n	80029fe <updateOsc+0x46>
        o.pos = o.pos + o.jump + pitchMod;
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	bf08      	it	eq
 8002a62:	463c      	moveq	r4, r7
 8002a64:	e7cb      	b.n	80029fe <updateOsc+0x46>
    	o.amp = 0x00;
 8002a66:	4643      	mov	r3, r8
		o.jump = 0;
 8002a68:	46c1      	mov	r9, r8
 8002a6a:	e7dc      	b.n	8002a26 <updateOsc+0x6e>
 8002a6c:	08002e08 	.word	0x08002e08
 8002a70:	08002f08 	.word	0x08002f08

08002a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a74:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_MspInit+0x38>)
 8002a78:	2100      	movs	r1, #0
 8002a7a:	9100      	str	r1, [sp, #0]
 8002a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
 8002a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a86:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a8a:	9200      	str	r2, [sp, #0]
 8002a8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	9101      	str	r1, [sp, #4]
 8002a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002aa2:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa4:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002aa6:	f7fd bd5f 	b.w	8000568 <HAL_NVIC_SetPriorityGrouping>
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800

08002ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab0:	b530      	push	{r4, r5, lr}
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab6:	2214      	movs	r2, #20
 8002ab8:	2100      	movs	r1, #0
 8002aba:	a803      	add	r0, sp, #12
 8002abc:	f000 f94c 	bl	8002d58 <memset>
  if(hi2c->Instance==I2C1)
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_I2C_MspInit+0x64>)
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d122      	bne.n	8002b0e <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4c13      	ldr	r4, [pc, #76]	; (8002b18 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	4814      	ldr	r0, [pc, #80]	; (8002b1c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002acc:	2500      	movs	r5, #0
 8002ace:	9501      	str	r5, [sp, #4]
 8002ad0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8002ad8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8002ae6:	2312      	movs	r3, #18
 8002ae8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aec:	2301      	movs	r3, #1
 8002aee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002af2:	2304      	movs	r3, #4
 8002af4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	f7fd ff2d 	bl	8000954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002afa:	9502      	str	r5, [sp, #8]
 8002afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b02:	6423      	str	r3, [r4, #64]	; 0x40
 8002b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b0e:	b009      	add	sp, #36	; 0x24
 8002b10:	bd30      	pop	{r4, r5, pc}
 8002b12:	bf00      	nop
 8002b14:	40005400 	.word	0x40005400
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020400 	.word	0x40020400

08002b20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b22:	4606      	mov	r6, r0
 8002b24:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b26:	2214      	movs	r2, #20
 8002b28:	2100      	movs	r1, #0
 8002b2a:	a803      	add	r0, sp, #12
 8002b2c:	f000 f914 	bl	8002d58 <memset>
  if(hi2s->Instance==SPI3)
 8002b30:	6832      	ldr	r2, [r6, #0]
 8002b32:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_I2S_MspInit+0xdc>)
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d15e      	bne.n	8002bf6 <HAL_I2S_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b38:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002b3c:	2500      	movs	r5, #0
 8002b3e:	9500      	str	r5, [sp, #0]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002b42:	482f      	ldr	r0, [pc, #188]	; (8002c00 <HAL_I2S_MspInit+0xe0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
 8002b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002b50:	9200      	str	r2, [sp, #0]
 8002b52:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	9501      	str	r5, [sp, #4]
 8002b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b60:	f002 0201 	and.w	r2, r2, #1
 8002b64:	9201      	str	r2, [sp, #4]
 8002b66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b68:	9502      	str	r5, [sp, #8]
 8002b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6c:	f042 0204 	orr.w	r2, r2, #4
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b7c:	2706      	movs	r7, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b80:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2310      	movs	r3, #16
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002b84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002b8a:	f7fd fee3 	bl	8000954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002b8e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b92:	a903      	add	r1, sp, #12
 8002b94:	481b      	ldr	r0, [pc, #108]	; (8002c04 <HAL_I2S_MspInit+0xe4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b96:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	e9cd 3403 	strd	r3, r4, [sp, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b9c:	f44f 6700 	mov.w	r7, #2048	; 0x800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba4:	f7fd fed6 	bl	8000954 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8002ba8:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002baa:	4816      	ldr	r0, [pc, #88]	; (8002c04 <HAL_I2S_MspInit+0xe4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8002bac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	e9cd 5505 	strd	r5, r5, [sp, #20]

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002bb8:	4c13      	ldr	r4, [pc, #76]	; (8002c08 <HAL_I2S_MspInit+0xe8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bba:	f7fd fecb 	bl	8000954 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_I2S_MspInit+0xec>)
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002bc0:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc4:	2340      	movs	r3, #64	; 0x40
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc6:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bce:	e9c4 3704 	strd	r3, r7, [r4, #16]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bda:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002bde:	4620      	mov	r0, r4
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002be4:	e9c4 3508 	strd	r3, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002be8:	f7fd fd3e 	bl	8000668 <HAL_DMA_Init>
 8002bec:	b108      	cbz	r0, 8002bf2 <HAL_I2S_MspInit+0xd2>
    {
      Error_Handler();
 8002bee:	f7ff fe75 	bl	80028dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002bf2:	63b4      	str	r4, [r6, #56]	; 0x38
 8002bf4:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002bf6:	b009      	add	sp, #36	; 0x24
 8002bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40003c00 	.word	0x40003c00
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020800 	.word	0x40020800
 8002c08:	20000080 	.word	0x20000080
 8002c0c:	40026088 	.word	0x40026088

08002c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c10:	b510      	push	{r4, lr}
 8002c12:	4604      	mov	r4, r0
 8002c14:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c16:	2214      	movs	r2, #20
 8002c18:	2100      	movs	r1, #0
 8002c1a:	a803      	add	r0, sp, #12
 8002c1c:	f000 f89c 	bl	8002d58 <memset>
  if(huart->Instance==USART2)
 8002c20:	6822      	ldr	r2, [r4, #0]
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_UART_MspInit+0x68>)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d124      	bne.n	8002c72 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c28:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	9101      	str	r1, [sp, #4]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c32:	4812      	ldr	r0, [pc, #72]	; (8002c7c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c40:	9201      	str	r2, [sp, #4]
 8002c42:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c44:	9102      	str	r1, [sp, #8]
 8002c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	9302      	str	r3, [sp, #8]
 8002c56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	220c      	movs	r2, #12
 8002c5a:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c68:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f7fd fe71 	bl	8000954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c72:	b008      	add	sp, #32
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	bf00      	nop
 8002c78:	40004400 	.word	0x40004400
 8002c7c:	40020000 	.word	0x40020000

08002c80 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c80:	4770      	bx	lr

08002c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c82:	e7fe      	b.n	8002c82 <HardFault_Handler>

08002c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c84:	e7fe      	b.n	8002c84 <MemManage_Handler>

08002c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c86:	e7fe      	b.n	8002c86 <BusFault_Handler>

08002c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler>

08002c8a <SVC_Handler>:
 8002c8a:	4770      	bx	lr

08002c8c <DebugMon_Handler>:
 8002c8c:	4770      	bx	lr

08002c8e <PendSV_Handler>:
 8002c8e:	4770      	bx	lr

08002c90 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c90:	f7fd bc58 	b.w	8000544 <HAL_IncTick>

08002c94 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002c94:	4801      	ldr	r0, [pc, #4]	; (8002c9c <DMA1_Stream5_IRQHandler+0x8>)
 8002c96:	f7fd bd9f 	b.w	80007d8 <HAL_DMA_IRQHandler>
 8002c9a:	bf00      	nop
 8002c9c:	20000080 	.word	0x20000080

08002ca0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <SystemInit+0x18>)
 8002ca2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ca6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cb2:	609a      	str	r2, [r3, #8]
#endif
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cc2:	e003      	b.n	8002ccc <LoopCopyDataInit>

08002cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cca:	3104      	adds	r1, #4

08002ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ccc:	480b      	ldr	r0, [pc, #44]	; (8002cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cd4:	d3f6      	bcc.n	8002cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cd8:	e002      	b.n	8002ce0 <LoopFillZerobss>

08002cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cdc:	f842 3b04 	str.w	r3, [r2], #4

08002ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ce4:	d3f9      	bcc.n	8002cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ce6:	f7ff ffdb 	bl	8002ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cea:	f000 f811 	bl	8002d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cee:	f7ff fca1 	bl	8002634 <main>
  bx  lr    
 8002cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cf4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cf8:	0800af30 	.word	0x0800af30
  ldr  r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d00:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002d04:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002d08:	2000024c 	.word	0x2000024c

08002d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d0c:	e7fe      	b.n	8002d0c <ADC_IRQHandler>
	...

08002d10 <__libc_init_array>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	4e0d      	ldr	r6, [pc, #52]	; (8002d48 <__libc_init_array+0x38>)
 8002d14:	4c0d      	ldr	r4, [pc, #52]	; (8002d4c <__libc_init_array+0x3c>)
 8002d16:	1ba4      	subs	r4, r4, r6
 8002d18:	10a4      	asrs	r4, r4, #2
 8002d1a:	2500      	movs	r5, #0
 8002d1c:	42a5      	cmp	r5, r4
 8002d1e:	d109      	bne.n	8002d34 <__libc_init_array+0x24>
 8002d20:	4e0b      	ldr	r6, [pc, #44]	; (8002d50 <__libc_init_array+0x40>)
 8002d22:	4c0c      	ldr	r4, [pc, #48]	; (8002d54 <__libc_init_array+0x44>)
 8002d24:	f000 f820 	bl	8002d68 <_init>
 8002d28:	1ba4      	subs	r4, r4, r6
 8002d2a:	10a4      	asrs	r4, r4, #2
 8002d2c:	2500      	movs	r5, #0
 8002d2e:	42a5      	cmp	r5, r4
 8002d30:	d105      	bne.n	8002d3e <__libc_init_array+0x2e>
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d38:	4798      	blx	r3
 8002d3a:	3501      	adds	r5, #1
 8002d3c:	e7ee      	b.n	8002d1c <__libc_init_array+0xc>
 8002d3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d42:	4798      	blx	r3
 8002d44:	3501      	adds	r5, #1
 8002d46:	e7f2      	b.n	8002d2e <__libc_init_array+0x1e>
 8002d48:	0800af28 	.word	0x0800af28
 8002d4c:	0800af28 	.word	0x0800af28
 8002d50:	0800af28 	.word	0x0800af28
 8002d54:	0800af2c 	.word	0x0800af2c

08002d58 <memset>:
 8002d58:	4402      	add	r2, r0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d100      	bne.n	8002d62 <memset+0xa>
 8002d60:	4770      	bx	lr
 8002d62:	f803 1b01 	strb.w	r1, [r3], #1
 8002d66:	e7f9      	b.n	8002d5c <memset+0x4>

08002d68 <_init>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr

08002d74 <_fini>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr
